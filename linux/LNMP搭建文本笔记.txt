Nginx 简介
LNMP架构
LNMP 服务管理方法
Nginx 配置文件
虚拟主机
Rewrite 重写
负载均衡服务器


		所谓的一键安装包，实际上还是安装的源码包与RPM包，只是把安装过程写成了脚本，便于初学者安装
		优点： 简单、快速、方便
		缺点：
			不能定义安装软件的版本
			不能定义所需要的软件功能
			源码包的优势丧失



#Nginx 简介
		Nginx 是一款轻量级的Web服务器/反响代理服务器及电子邮件 (IMAP/POP3) 代理服务器，由俄国公司2004年发布的
		
		并发量
			Apache    400      2048
			nginx     1024     50000
		
		响应方式不同：
			Apache:           同步响应         400    同步响应是每一个进程只能支持一个用户访问，这个用户访问登录这个进程就分配给他直到他的访问终结之后这个进程才会被收回给下一个用户来使用
			nginx :			  异步响应 		  50000   只处理静态文件   
			
		
		https://lnmp.org/  一键安装包下载地址
		
		wget http://soft.vpser.net/lnmp/lnmp1.5.tar.gz   //选择一个版本 wget下载
		
		tar zxvf lnmp1.5.tar.gz
		
		cd lnmpl.5/
		./install.sh lnmp     //如果想装Apache 后面的参数是 lamp
		安装的完整过程
		https://lnmp.org/install.html
		
		
		Nginx 目录：/usr/local/nginx/
		MySQL 目录：/usr/local/mysql/
		MySQL 数据库所在目录：/usr/local/mysql/var
		PHP目录：/usr/local/php/
		PHPMyAdmin 目录：/home/wwwroot/default/phpmyadmin/
		默认网站目录：/home/wwwroot/default/
		Nginx日志目录：/home/wwwlogs/
		虚拟主机配置文件所在目录：/usr/local/nginx/conf/vhost/
		
		
		修改 phpmyadmin 配置文件 
		
		cd /home/wwwroot/default/phpmyadmin/config.inc.php 
		
		$cfg['Servers'][$i]['auth_type'] = 'http';   //把cookie修改成 http

	##LNMP相关的配置文件
		
		Nginx 主配置文件：/usr/local/nginx/conf/nginx.conf
		MySQL配置文件：   /etc/my.cnf
		PHP配置文件：	  /usr/local/php/etc/php.ini
		php-fpm配置文件： /usr/local/php/etc/php-fpm.conf
		
	##平滑重启：
		
		
	##Nginx 配置文件
		
		/usr/local/nginx/conf/nginx.conf.default   NGINX默认配置文件
		/usr/local/nginx/conf/nginx.conf		   LNMP作者写的配置文件
		
		下面是LNMP作者的配置文件内容
		
		
		1、配置文件结构
		
		基本配置
		
		event{
			网络模型定义
		}
		
		http{
			网站整体环境配置
			server{
				一个可以访问的web服务器
			}
			server{
				第二个可以访问的web服务器(相当于apache的虚拟主机)
			}
		}
		
		
		2、配置文件分析
		vim /usr/local/nginx/conf/nginx/nginx.conf
		user www www;  #Nginx 服务器的为用户和为用户组  rtmp://192.168.0.105:1935/hls
		
		worker_processes 1; #启动进程，通常设置成和cpu的数量相等。相当于 cpu 个数
		
		error_loc logs/nginx_error_log;  #错误日志
		
		pid   /usr/local/nginx/nginx.pid #主进程 PID 保存文件
		cat   /usr/local/nginx/nginx.pid #确定nginx已经是启动状态
		 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

#最大同时链接数设置	

		#文件描述符数量
		worker_rlimit_nofile 51200;

		events
			{
				#网络 I/O 模型，建议 linux 使用 epoll,FreeBSD 使用 kqueue
				#epoll 是多路复用 IO(I/O Multiplexing)中的一种方式，但是仅用于 linux2.6以 上内存核，可以大大提高nginx的性能
				use epoll;
				
				#单个工作进程最大允许链接数
				worker_connections 51200;
				multi_accept on;
			}

			#linux系统默认是不支持打开5万个文件的，为了让linux系统和nginx一样可以同时打开5万个文件需要做两个配置
			#1、在nginx 配置 worker_rlimit_nofile 51200; 5万个描述符  
			#2、执行 ulimit -a 查看linux 系统支持最大的打开文件数
		
			[root@localhost conf]# ulimit -a
			core file size          (blocks, -c) 0
			data seg size           (kbytes, -d) unlimited
			scheduling priority             (-e) 0
			file size               (blocks, -f) unlimited
			pending signals                 (-i) 7234
			max locked memory       (kbytes, -l) 64
			max memory size         (kbytes, -m) unlimited
			open files                      (-n) 1024      ##最大的打开文件数
			pipe size            (512 bytes, -p) 8
			POSIX message queues     (bytes, -q) 819200
			real-time priority              (-r) 0
			stack size              (kbytes, -s) 8192
			cpu time               (seconds, -t) unlimited
			max user processes              (-u) 7234
			virtual memory          (kbytes, -v) unlimited
			file locks                      (-x) unlimited
		
			#修改 linux 最大的打开文件数（linux 设置的最大的打开文件数要大于nginx设置的最大数）
			[root@localhost conf]# ulimit -SHn 65535
			[root@localhost conf]# 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
			
http的整体环境配置  /home/wwwroot/default/b33joz/live.sql

http{
        include       mime.types;
		
		#设定mime 类型，文件传送类型由  mime.types 文件定义
        default_type  application/octet-stream;

        server_names_hash_bucket_size 128;   #保存服务器名字的hash表大
        client_header_buffer_size 32k;		 #客户端请求头部缓冲区大小
        large_client_header_buffers 4 32k;	 #最大客户端头缓冲大小
        client_max_body_size 50m; 			 #客户端最大上传文件大小（M）
		
		#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘 IO 重复载应用，可设置为off，以平衡磁盘与网络 I/O 处理速度，降低系统的uptime
        sendfile   on;
        
		#这个是默认的，结果就是数据包不会马上传送出去，等到我数据包最大时，一次性的传输出去，这样有助于解决网络堵塞，(只在sendfile on 时有效)
		tcp_nopush on;

		#链接超时时间
        keepalive_timeout 60;

		#禁用 nagle 算法，也即不缓存数据
        tcp_nodelay on;

		#fastcgi 设置
        fastcgi_connect_timeout 300;  #链接超时时间
        fastcgi_send_timeout 300;     #发送超时时间
        fastcgi_read_timeout 300;	  #接收的超时时间
        fastcgi_buffer_size 64k;	  #缓冲的大小
        fastcgi_buffers 4 64k;
        fastcgi_busy_buffers_size 128k;
        fastcgi_temp_file_write_size 256k;
		
		&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
		#网络压缩
		
		#意思是如果用nginx来进行浏览器访问的话，它的数据不是直接发送。而是先压缩在发送到了地方在解压
		#这种方法的好处是节约带宽，因为发送的是压缩包。坏处是客户端和服务器端都要浪费一定的运算资源
        gzip on;
		#设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩。建议设置成大于1K。如果小于1K可能会越压越大。
        gzip_min_length  1k;
		#压缩缓冲区大小。表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果。
        gzip_buffers     4 16k;
		#压缩版本（默认1.1，前端为squid2.5时使用1.0）用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。
        gzip_http_version 1.1;
		#压缩比率。用来指定GZIP压缩比，1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源。
        gzip_comp_level 2;
		#用来指定压缩的类型，“text/html”类型总是会被压缩
        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;
        gzip_vary on;
        gzip_proxied   expired no-cache no-store private auth;
        gzip_disable   "MSIE [1-6]\.";
		&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
		
		
        #limit_conn_zone $binary_remote_addr zone=perip:10m;
        ##If enable limit_conn_zone,add "limit_conn perip 10;" to server section.
		

		#隐藏nginx版本号(curl -I 192.168.4.154可以查看，更加安全)；
        server_tokens off;
		
        access_log off;

server{
		 #监听端口
         listen 80 default_server;
         #listen [::]:80 default_server ipv6only=on;
         server_name _;  #网站域名
         index index.html index.htm index.php;  #默认网站的文件名，谁靠前谁的优先及最高
         root  /home/wwwroot/default;			#网页主目录
 
         #error_page   404   /404.html;
 
         # Deny access to PHP files in specific directory
         #location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }				
 
         include enable-php.conf;
		 
		 #没有加 ~ 号的匹配意思是完整的字符串访问 /nginx_status
         location /nginx_status
         {
             stub_status on;
             access_log   off;
         }
		 #只要在url当中匹配到 以下任意后缀
         location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$  # 只加波浪号匹配代表不区分大小写 。后面是标准正则
         {
             expires      30d;    #缓存30天
         }
		#匹配到 js或是css的文件 
         location ~ .*\.(js|css)?$
         {
             expires      12h;  #缓存12小时
         }
 
         location ~ /.well-known {
             allow all;
         }
 
         location ~ /\.
         {
             deny all;
         }
		#访问日志
         access_log  /home/wwwlogs/access.log;
     }
 #vhost/ 子配置文件
 include vhost/*.conf;
}

#LNMP添加、删除虚拟主机及伪静态使用教程
		
		在linux环境下执行 lnmp vhost add 命令然后根据提示一步步往下填写就可以
		
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
		
		
#Rewrite重定向域名跳转		
		
		
		绝大多数的跳转只要 last
		如果是实现域名跳转在后面加 permanent
		
		注意nginx 的域名重定向是写在server内的
		
		server
		{
			listen 80;
			#listen [::]:80;
			server_name www.sina.com sina.com;
			index index.html index.htm index.php default.html default.htm default.php;
			root  /home/wwwroot/www.sina.com;
			
			#域名重定向
			#如果匹配到 www.sina.com 赋给变量 $http_host
			if($http_host=www.sina.com){ 
				rewrite (.*) http://www.sohu.com permanent;  如果$http_host变量有任何内容 跳转到 www.sohu.com 
			}
			
			#文件跳转
			#当在浏览器中匹配到 test文件的时候 跳转到 index.html 文件跳转需要注意必须要加 / 要不然会找不到文件
			rewrite test /index.html last; 
			
			include rewrite/.conf;
			#error_page   404   /404.html;
		
			# Deny access to PHP files in specific directory
			#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }
		
			include enable-php.conf;
		
			location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
			{
				expires      30d;
			}
		
			location ~ .*\.(js|css)?$
			{
				expires      12h;
			}
		
			location ~ /.well-known {
				allow all;
			}
		
			location ~ /\.
			{
				deny all;
			}
		
			access_log off;
		}
		
		
#反向代理
		nginx 只能做负载均衡或是网站，不能又是负载均衡又是网站
		
		首先把 server{ } 部分删掉或是注释掉 虚拟主机部分也不用（include vhost/*.conf;）
		
		http{
			upstream myweb1{
				#定义地址池（告诉nginx有多少个服务器，它们的ip是多少）
					server 192.168.244.10:80
					server 192.168.244.11:80
			}
			server{
				listen 80;
				#使用 www.sohu.com访问
				server_name www.souhu.com;
				
				
				localhost /{
				
					#调用地址池
					proxy_pass http://myweb1;
					
					
					#定义故障转移。后端服务器节点返回 500 502 503 504 和超时等错误时，自动把请求转发到另一台服务器，转移故障。
					#一旦发现有服务器请求错误就把请求发送到另一台服务器
					proxy_next_upstream http_500 http_502 http_503 eror timeout invalid_header;
					
					#利用HOST 变量向后端服务器传递需要解析的客户端访问的域名（传递域名）
					proxy_set_header Host $host;
					
					#remote_addr 把客户端真实IP赋予 X-Forwarded-Forh。后端服务器才能获取真实的客户端IP。以便记录日志，要不日志中记录的访问信息都是负载均衡服务器，而不是客户端（传递IP）
					proxy_set_header X-Forwarded-For $remote_addr;
					
					
				}
			}
		}
		
		
		
		
		
		
		
		
		
		user  www www;

		worker_processes auto;
		
		error_log  /home/wwwlogs/nginx_error.log  crit;
		
		pid        /usr/local/nginx/logs/nginx.pid;
		
		#Specifies the value for maximum file descriptors that can be opened by this process.
		worker_rlimit_nofile 51200;
		
		events
			{
				use epoll;
				worker_connections 51200;
		user  www www;
		
		worker_processes auto;
		
		error_log  /home/wwwlogs/nginx_error.log  crit;
		
		pid        /usr/local/nginx/logs/nginx.pid;
		
		#Specifies the value for maximum file descriptors that can be opened by this process.
		worker_rlimit_nofile 51200;
		
		events
			{
				use epoll;
				worker_connections 51200;
				multi_accept on;
			}
		
		http
			{
				include       mime.types;
				default_type  application/octet-stream;
		
				server_names_hash_bucket_size 128;
				client_header_buffer_size 32k;
				large_client_header_buffers 4 32k;
				client_max_body_size 50m;
		
				sendfile   on;
				tcp_nopush on;
		
				keepalive_timeout 60;
		
				tcp_nodelay on;
		
				fastcgi_connect_timeout 300;
				fastcgi_send_timeout 300;
				fastcgi_read_timeout 300;
				fastcgi_buffer_size 64k;
				fastcgi_buffers 4 64k;
				fastcgi_busy_buffers_size 128k;
				fastcgi_temp_file_write_size 256k;
		
				gzip on;
				gzip_min_length  1k;
				gzip_buffers     4 16k;
				gzip_http_version 1.1;
				gzip_comp_level 2;
				gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;
				gzip_vary on;
				gzip_proxied   expired no-cache no-store private auth;
				gzip_disable   "MSIE [1-6]\.";
		
				#limit_conn_zone $binary_remote_addr zone=perip:10m;
				##If enable limit_conn_zone,add "limit_conn perip 10;" to server section.
		
				server_tokens off;
				access_log off;
			#定义地址池	
			upstream myweb1{
				#定义地址池（告诉nginx有多少个服务器，它们的ip是多少）
					server 192.168.244.10:80
					server 192.168.244.11:80
			}
		#server
		#	{
		#		listen 80 default_server;
		#		#listen [::]:80 default_server ipv6only=on;
		#		server_name _;
		#		index index.html index.htm index.php;
		#		root  /home/wwwroot/default;
		#
		#		#error_page   404   /404.html;
		#
		#		# Deny access to PHP files in specific directory
		#		#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }
		#
		#		include enable-php.conf;
		#
		#		location /nginx_status
		#		{
		#			stub_status on;
		#			access_log   off;
		#		}
		#
		#		location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
		#		{
		#			expires      30d;
		#		}
		#
		#		location ~ .*\.(js|css)?$
		#		{
		#			expires      12h;
		#		}
		#
		#		location ~ /.well-known {
		#			allow all;
		#		}
		#
		#		location ~ /\.
		#		{
		#			deny all;
		#		}
		#
		#		access_log  /home/wwwlogs/access.log;
		#	}
		#include vhost/*.conf;
		
		
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		