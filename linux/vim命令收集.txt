
1.安装
 
 yum -y install vim*


2.配置

 vim /etc/vimrc

 set nu          " 设置显示行号
 set showmode    " 设置在命令行界面最下面显示当前模式等
 set ruler       " 在右下角显示光标所在的行数等信息
 set autoindent  " 设置每次单击Enter键后，光标移动到下一行时与上一行的起始字符对齐
 syntax on       " 即设置语法检测，当编辑C或者Shell脚本时，关键字会用特殊颜色显示


 set nocompatible 			   打开语法高亮

 set showmode     			   命令模式下显示键入的指令

 set mouse=a 				   支持使用鼠标

 set encoding=utf-8			   使用utf-8编码

 set t_Co=256	   		  	   启用256色	  		  

 filetype indent on   		   开启文件类型检查，并且载入与该类型对应的缩进规则(如.py 文件会去找~/.vim/indent/python.vim)


 set autoindent  			   下一行的缩进更上一行保持一致

 set tabstop=2				   按下Tab会显示vim的空格数
 
 set expandtab       		   文本上按下>>(增加一级缩进) <<(取消一级缩进) ==(取消全部缩进)	

 set softtabstop=2   		   Tab 转为多少空格		   

 set number 				   显示行号

 set relativenumber   		   显示光标所在行的行号，其它行都为相对改行的行号 光标所在的当前行高亮

 set cursorline    			   设置行宽

 set textwidth=80    		   自动拆行,关闭用set nowtap 

 set wrap    				   遇到指定符号(如空格)才拆行

 set linebreak   			   指定拆行与编辑窗口右边缘之间空出的字符数

 set wrapmargin=2   		   垂直滚动时，光标距离顶部或者底部的位置

 set scrolloff=15   		   水平滚动时，光标距离行首或行尾的位置(不拆行时有用)

 set sidescrolloff=5   		   是否显示状态栏。0 表示不显示，1 表示只在多窗口时显示，2 表示显示

 set laststatus=2  			   在状态栏显示光标的当前位置（位于哪一行哪一列）

 set ruler  				   光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号

 set showmatch   			   搜索时，高亮显示匹配结果

 set hlsearch   			   输入搜索模式时，每输入一个字符，就自动跳到第一个匹配的结果

 set incsearch   			   搜索时忽略大小写

 set smartcase   			   打开英语单词的拼写检查

 set spell spelllang=en_us     出错时，发出视觉提示，通常是屏幕闪烁





	1）. 输入模式 
　　按「i」切换进入输入模式「insert mode」，按“i”进入输入模式后是从光标当前位置开始输入文件； 
　　按「a」进入输入模式后，是从目前光标所在位置的下一个位置开始输入文字； 
　　按「o」进入输入模式后，是插入新的一行，从行首开始输入文字。 

    2）. 从输入模式切换为命令模式 
　　按「ESC」键。

    3）. 移动光标 ====
　　 vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。
　　 按「ctrl」+「b」： 屏幕往“后”移动一页。
　　 按「ctrl」+「f」： 屏幕往“前”移动一页。
　　 按「ctrl」+「u」： 屏幕往“后”移动半页。
    按「ctrl」+「d」： 屏幕往“前”移动半页。
    按「Ctrl」+ 「r」：重做上一个动作。(常用)
	  「u」 		 ：取消上一步操作
		这个 u 不 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按
							键，你的编辑，嘿嘿！很快乐的啦！
							
　　按「0」：	移动到这一行的开头B。 
　　按「G」：	移动到文章的最后。 
　　按「g」：	移动到文章的开头。 
　　按「$」：	移动到光标所在行的“行尾”。 
　　按「^」：	移动到光标所在行的“行首” 
　　按「w」：	光标跳到下个字的开头 
　　按「e」：	光标跳到下个字的字尾 
　　按「b」：   光标回到上个字的开头 
　　按「#l」：  光标移到该行的第#个位置，如：5l,56l。 
	n<Enter>  n 为数字。光标向下移动 n 行(常用)
    H  			光标移动到这个屏幕的最上方那一行的第一个字符
	M  			光标移动到这个屏幕的中央那一行的第一个字符
	L  			光标移动到这个屏幕的最下方那一行的第一个字符
	G  			移动到这个档案的最后一行(常用)
	nG  		n为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
	gg  		移动到这个档案的第一行，相当亍 1G 啊！ (常用)


	4）. 		删除文字 
　　「x」： 	每按一次，删除光标所在位置的“后面”一个字符。 
　　「#x」：	例如，「6x」表示删除光标所在位置的“后面”6个字符。 
　　「X」：		大写的X，每按一次，删除光标所在位置的“前面”一个字符。 
　　「#X」：	例如，「20X」表示删除光标所在位置的“前面”20个字符。
　　「dd」：	删除光标所在行。 
　　「#dd」：	从光标所在行开始删除#行 
	 [:n1,n2d]  删除指定范围的行
	 [u] 		取消上一步操作
	 
	 
    5）. 复制 
　　「yw」：将光标所在之处到字尾的字符复制到缓冲区中。 
　　「#yw」：复制#个字到缓冲区 
　　「yy」：复制光标所在行到缓冲区。 
　　「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。 
　　「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。
	 [dd]  剪切当前行
	 [y1G] 复制光标所在列到第一列的所有数据
	 [ndd] 剪切当前行以下n行
	 [p、P] 粘贴在当前光标所在行下或行上
	 
	 
	6）. 替换 
　　「r」：替换光标所在处的字符。 
　　「R」：替换光标所到之处的字符，直到按下「ESC」键为止。 
	 [u] 取消上一步操作
	 :g/A/s//B/g :  把符合 A 的内容全部替换为 B
	 :%s/A/B/g : 把符合A 的内容全部替换为 B
	 :n1,n2s/A/B/g : n1,n2 为数字（行号），在第 n1 和 n2 间寻找 A 用 B 替换
	 
	 
    7）. 回复上一次操作 
　　「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次“u”可以执行多次回复。
 
    8）. 更改 
　　「cw」：更改光标所在处的字到字尾处 
　　「c#w」：例如，「c3w」表示更改3个字 

    9）. 跳至指定的行 
　　「ctrl」+「g」列出光标所在行的行号。 
　　「#G」：例如，「15G」，表示移动光标至文章的第15行行首。

   
	Last line mode下命令简介（就是在vim中命令模式下命令）
　　在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。
 
    A) 列出行号 
　「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。 

    B) 跳到文件中的某一行 
　「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。
 
    C) 查找字符 
	
　「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。
  「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。

   n			这个 n 是英文按键。代表『重复前一个搜寻的动作』。丼例来说， 如
			果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n
			后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执
			行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
			
	N		这个 N 是英文按键。不 n 刚好相反，为『反向』进行前一个搜寻动
			作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
			
    D) 保存文件 
　「w」：在冒号输入字母「w」就可以将文件保存起来。 

    E) 离开vi 
　「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。 
　「wq」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。 


	l 戒 向右箭央键(→)  光标向右移动一个字符
	
	如果你将右手放在键盘上的话，你会収现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动
	光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 戒 "30↓" 的组合按
	键， 亦即加上想要进行的次数(数字)后，按下动作即可！

   杂项
   :!which ls  查找ls 命令存放在哪个路径中
   :r !date  把当前的时间导入到vim文件光标所在的行（也可以认为把命令的执行结果导入到光标所在的行）
   :map ^P I#<ESC>    定义快捷键按 Ctrl+v+p或是Ctrl+v然后在按Ctrl+p  出现 ^P 有颜色的字样，表示 Ctrl+P为定义的快捷键 然后在后面写快捷键的命令 I#<ESC> 表示不管光标在当前行的哪个位置都跳到行首然后加#号然后退出到命令模式
   :map ^B 0x      定义快捷键按 Ctrl+v+p或是Ctrl+v然后在按Ctrl+B  出现 ^B 有颜色的字样，表示 Ctrl+P为定义的快捷键 然后在后面写快捷键的命令 0x 表示跳到行首然后把第一个字符删掉（因为这回没有进入插入模式因此不用ESC退出）这个操作一般用来做删除#号注释
   :1,4s/^/#/g     表示注释掉1~4行
   :1,4s/^#        表示1~4行行首取消注释（注释的话必须打上要注释的字符）
   :1,4s/#//g	   全部取消注释
   :1,4s/^/\/\//g  表示用//注释掉1~4行
   :ab mymail samlee@lampbrother.net    在vim文件中给 samlee@lampbrother.net邮箱定义别名 mymail 然后在vim文件中只要输入 mymail 就会自动替换成 samlee@lampbrother.net
   
   如果想让以上的命令设置永久有效就在每个用户home/roye 的宿主目录下 添加一个文件 .vimrc 然后把以上设置都配置到.vimrc 就可用永久有效

	sz -y ca.crt test.crt test.key client.conf  #把这几个文件下载到客户端


