
【修改主机名】
【linux 进程】
【工作管理】
【计划任务】
【日志管理】	
【挂载光盘yum源】
【linux 更新yum源 改成阿里云源】
【CentOS7防火墙开启和关闭端口】









【修改主机名】
	方法1：临时有效
	[root@localhost ~]# hostname vpnserver
	方法2：永久生效
	[root@localhost ~]# hostnamectl set-hostname vpnserver
	[root@localhost ~]# hostnamectl --pretty
	[root@localhost ~]# hostnamectl --static
	vpnserver
	[root@localhost ~]# hostnamectl --transient
    就像上面展示的那样，在修改静态/瞬态主机名时，任何特殊字符或空白字符会被移除，而提供的参数中的任何大写字母会自动转化为小写。
        一旦修改了静态主机名，/etc/hostname 将被自动更新。然而，/etc/hosts 不会更新以保存所做的修改，所以你每次在修改主机名后一定要手动更新/etc/hosts，之后再重启CentOS 7。否则系统再启动时会很慢

	手动更新/etc/hosts
	[root@localhost ~]# vim /etc/hosts
	#127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
	#::1         localhost localhost.localdomain localhost6 localhost6.localdomain6	
	127.0.0.1   vpnserver
	::1			vpnserver
	重启CentOS 7 
	[root@localhost ~]# reboot -f
	重启之后
	[root@vpnserver ~]# hostname
	vpnserver
	[root@vpnserver ~]# 

【linux 进程】
	 ps aux  查看系统中所有进程，使用BSD操作系统格式
	 ps -le 查看系统中所有进程，使用linux标准命令格式	
	
	 USER:该进程是由哪个用户产生的：
	 PID:进程的ID号
	 %CPU：该进程占用CPU资源的百分比，占用越高，进程越耗费资源：
	 %MEM:该进程占用物理内存的百分比，占用越高，进程越耗费资源：
	 VSZ:该进程占用虚拟内存的大小，单位KB;
	 RSS:该进程占用实际物理内存的大小，单位KB;
	 TTY:该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图像终端。pts/0-356代表虚拟终端。
	 STAT:进程状态。常见的状态有：R：运行、S：睡眠、T：停止状态、S：包含子进程、+：位于后台
	 、T：停止状态、s：包含子进程、+：位于后台
	 START:该进程的启动时间
	 TIME:该进程占用CPU的运算时间，注意不是系统时间，
	 COMMAND:产生此进程的命令名
	 
	[root@localhost ~]# top [选项]
	选项：
		-d 秒数：指定top 命令每隔几秒更新。默认是3秒
		在top命令的交互模式当中可以执行的命令：
		?或h: 显示交互模式的帮助
		P:	以CPU使用率排序，默认就是此项
		M: 以内存的使用率排序
		N: 以PID排序
		q: 退出top 
		
		top 第一行信息为任务队列信息

	top - 09:03:43 up 20:34,  3 users,  load average: 0.01, 0.04, 0.05
	Tasks: 178 total,   2 running, 176 sleeping,   0 stopped,   0 zombie
	%Cpu(s):  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
	KiB Mem :  1883560 total,   175608 free,   757984 used,   949968 buff/cache
	KiB Swap:  2097148 total,  2096360 free,      788 used.   918604 avail Mem 
	
	标注：重点要注意的地方，如果占用率过高表示需要人为介入
	top 第一行信息为任务队列信息
		+----------------------+--------------------------------------------------------+
		|   内容 	           |   说明		   					  				 	    |
		+----------------------+--------------------------------------------------------+
		|   12:26:46       	   | 系统当前时间 									 	    |
		+----------------------+--------------------------------------------------------+
		|  up 1 day ,13 32     |  系统的运行时间，本机以及运行1天 13小时32分钟   	    |
		+----------------------+--------------------------------------------------------+
		| 2users 			   | 当前登录了两个用户								   	    |
		+----------------------+--------------------------------------------------------+
		| load average: 0.00,  |  系统在之前1分钟，5分钟，15分钟的平均负载。一般 		|
		| 0.00  0.00           |  认为小于1小时，负载较小。如果大于1，系统已经超出负荷。|
		|	（重点要注意） 	   |														|
		+----------------------+--------------------------------------------------------+
	top 第二行信息为任务队列信息 

		+----------------------+--------------------------------------------------------+
		|   内容 	           |   说明		   					  				 	    |
		+----------------------+--------------------------------------------------------+
		|   Tasks: 178 total   | 一共有 178个进程 									    |					
		+----------------------+--------------------------------------------------------+
		|  176 sleeping    	   |  176个是睡眠了   	  								    |
		+----------------------+--------------------------------------------------------+
		|  0 stopped 		   | 0个正在停止									   	    |
		+----------------------+--------------------------------------------------------+
		| 0 stopped			   |  0个僵尸进程（如果不是0，需要手工检查僵尸进程）	    |
		+----------------------+--------------------------------------------------------+	
	top 第三行信息为任务队列信息

		+-------------------------+--------------------------------------------------------+
		|   内容 	        	  |   说明		   					  				 	   |
		+-------------------------+--------------------------------------------------------+
		|   %Cpu(s):  0.0 us	  | 用户模式占用的cpu百分比 						 	   |
		+-------------------------+--------------------------------------------------------+
		|   0.3 sy    			  |  系统模式占用的CPU百分比							   |
		+-------------------------+--------------------------------------------------------+
		|   0.0 ni 				  | 改变过优先级的用户进程占用的CPU百分比			   	   |
		+-------------------------+--------------------------------------------------------+
		|   99.7 id（重点要注意） | 空闲cpu的cpu百分比						   	           |
		+-------------------------+--------------------------------------------------------+
		|   0.0 wa  			  | 等待输入/输出的进程的占用cpu百分比				   	   |
		+-------------------------+--------------------------------------------------------+
		|   0.0 hi  			  | 硬中断请求服务占用的cpu百分比			   	    	   |
		+-------------------------+--------------------------------------------------------+
		|   0.0 si  			  | 软中断请求服务占用的cpu百分比		   	    		   |
		+-------------------------+--------------------------------------------------------+	
		|   0.0 st 			 	  |  st ( Steal time ) 虚拟时间百分比。就是当有虚拟机时，  |
		| 		             	  |  虚拟cpu等待实际cpu的时间百分比						   |
		+-------------------------+--------------------------------------------------------+	
	top 第四行信息为物理内存信息	
	
		+------------------------------+--------------------------------------------------------+
		|   内容 	           		   |      				说明	  		    		 	    |
		+------------------------------+--------------------------------------------------------+
		|   KiB Mem :  1883560 total   | 物理内存的总量，单位KB	 						 	    |
		+------------------------------+--------------------------------------------------------+
		|   757984 used  		       | 已经使用的物理内存数量							    	|
		+------------------------------+--------------------------------------------------------+
		|   175608 free（重点要注意）  | 空闲的物理内存数量，我们使用的是虚拟机，总共分配了	    |
		|							   | 1024MB内存，所以只有175608k 的空闲内存了				|
		+------------------------------+--------------------------------------------------------+
		|   949968 buff/cache  		   | 空作为缓冲的内存数量						   	        |
		+------------------------------+--------------------------------------------------------+
	
	top 第五行为交换分区swap信息
		KiB Swap:  2097148 total,  2096360 free,      788 used.   918604 avail Mem 
		+------------------------------+--------------------------------------------------------+
		|   内容 	           		   |      				说明	  		    		 	    |
		+------------------------------+--------------------------------------------------------+
		|   KiB Swap:  2097148 total   | 交换分区（虚拟内存）的总大小						 	|
		+------------------------------+--------------------------------------------------------+
		|   788 used		     	   | 已经使用的交互分区的大小							    |
		+------------------------------+--------------------------------------------------------+
		|   2096360 free  		       | 空闲交换分区的大小	    								|
		+------------------------------+--------------------------------------------------------+
		|   918604 avail Mem  		   | 作为缓存的交互分区的大小						   	    |
		+------------------------------+--------------------------------------------------------+	
	进程树
		[root@bogon ~]# pstree 
		systemd─┬─ModemManager───2*[{ModemManager}]   #表示依赖于systemd 进程 ； ModemManager───2*[{ModemManager}] 一个ModemManager主进程会产生两个[{ModemManager}] 子进程
				├─NetworkManager─┬─dhclient
				│                └─2*[{NetworkManager}]
				├─2*[abrt-watch-log]
				├─abrtd
				├─accounts-daemon───2*[{accounts-daemon}]
				├─alsactl
				├─at-spi-bus-laun─┬─dbus-daemon
				│                 └─3*[{at-spi-bus-laun}]
				├─at-spi2-registr───2*[{at-spi2-registr}]
				├─atd
				├─auditd─┬─audispd─┬─sedispatch
				│        │         └─{audispd}
				│        └─{auditd}
				├─avahi-daemon───avahi-daemon
				
				......
				
		[root@bogon ~]# pstree -p  #显示进程树和进程id
		systemd(1)─┬─ModemManager(681)─┬─{ModemManager}(704)
				│                   └─{ModemManager}(706)
				├─NetworkManager(680)─┬─dhclient(12638)
				│                     ├─{NetworkManager}(725)
				│                     └─{NetworkManager}(727)
				├─abrt-watch-log(650)
				├─abrt-watch-log(651)
				├─abrtd(649)
				├─accounts-daemon(686)─┬─{accounts-daemon}(697)
				│                      └─{accounts-daemon}(699)
				├─alsactl(690)
				├─at-spi-bus-laun(2227)─┬─dbus-daemon(2232)
				│                       ├─{at-spi-bus-laun}(2228)
				│                       ├─{at-spi-bus-laun}(2229)
				│                       └─{at-spi-bus-laun}(2231)
				├─at-spi2-registr(2236)─┬─{at-spi2-registr}(2240)
				│                       └─{at-spi2-registr}(2241)	
				
				......
				
		[root@bogon ~]# pstree -p  | grep httpd
				┬─httpd(22354)─┬─{httpd}(22367)
				│ 			   ├─{httpd}(22368)
				│ 			   ├─{httpd}(22369)
				│              ├─{httpd}(22370)
				│              └─{httpd}(22371)
		
		
		
	kill 命令 
	
	
		[root@localhost ~]# kill -l #查看可用的进程信号
		
		+----------+-------------+-----------------------------------------------------------+
		| 信号代号 |  信号名称 	 |								说明						 |
		+----------+-------------+-----------------------------------------------------------+
		|	  1	   |  SIGHUP	 |	该信号让进程立即关闭，然后重新读取配置文件之后重启。     |
		+----------+-------------+-----------------------------------------------------------+
		|	  2	   |  SIGINT	 | 程序终止信号，用于终止前台进程。相当于输出ctrl+c 快捷键。 |
		+----------+-------------+-----------------------------------------------------------+
		|     8	   |  SIGFPE 	 | 在发生致命的算术运算错误时发出，不仅包括浮点运算错误，还	 |
		|		   |			 | 包括溢出及除数为0等其他所有的算术的错误。				 |
		+----------+-------------+-----------------------------------------------------------+
		|     9	   |  SIGKILL 	 | 用来理解介绍程序的运行，本信号不能被组赛、处理和忽略。一	 |
		|		   |			 | 般用于强制终止进程。										 |
		+----------+-------------+-----------------------------------------------------------+
		|     14   |  SIGALRM 	 | 时钟定时信号，计算的是实际的时间或时钟时间，alarm函数	 |
		|		   |			 | 使用该信号。												 |
		+----------+-------------+-----------------------------------------------------------+
		|     15   |  SIGTERM 	 | 正常结束进程的信号，kill命令的默认信号。有时如果进程已经	 |
		|		   |			 | 发生问题，这个信号是无法正常终止进程的，我们才会尝试      |
		|		   |			 | SIGKILL 信号，也就是信号9。								 |
		+----------+-------------+-----------------------------------------------------------+
		|	  18   |  SIGCONT	 |	该信号可以让暂停的进程恢复执行，本信号不能被阻断。    	 |
		+----------+-------------+-----------------------------------------------------------+
		|     19   |  SIGSTOP	 | 该信号可以暂停前台进程，相当于输入ctrl+z快捷键。本信号不	 |
		|		   |			 | 能被阻断。												 |
		+----------+-------------+-----------------------------------------------------------+
		
		killall [选项][信号] 进程名
		#按照进程名杀死进程
		选项：
			-i: 	交互式，询问是否要杀死某个进程
			-I:     忽略进程名的大小写
		pkill [选项][信号] 进程名
		#按照进程名杀死进程
		选项：
			-t 终端号：按照终端号提出用户
			
		[root@localhost ~]# kill -1 12345 #后面是进程id
		
		kill 和pkill 还有killall 的区别是 kill 按照pid杀死一个进程 pkill和killall是按照进程名杀死一类进程而且,pkill可以使用-t所以更加利于在线剔除用户而且不会出错
		
【工作管理】
	tar -zcf etc.tar.gz /etc/ &
	[root@localhot ~]# jobs [-l]
		选项：
			-l: 显示工作的PID
		注：
			“+”号代表最近一个放入后台的工作，也是工作恢复时，默认恢复的工作。“_” 号代表倒是第二个放入后台的工作
	[root@localhost ~]# fg %工作号
		参数：
		%工作号: %号可以省略，但是注意工作号和PID的区别
		注：后台恢复执行的命令，是不能和前台有交互的，否则不能恢复到后台执行
		
	■ vmstat 命令监控系统资源
	[root@localhost ~]# vmstat [刷新延时刷新次数]
	例如：
		
	[root@localhost ~]# vmstat 13 #监听3次我的系统资源每次间隔一秒钟
	
	■ dmesg 开机时内核检测信息
	[root@localhost ~]#dmesg 
	[root@localhost ~]#dmesg |grep CPU  #查看cpu的基本情况
	[root@localhost ~]#dmesg |grep eth0 #查看网卡的基本情况 
	
	■ free 命令查看内存使用状态
	[root@localhost ~]#free [-b|-k|-m|-g]
	选项：	
		-b: 以字节为单位显示
		-k: 以KB为单位显示，默认就是以KB为单位显示
		-m: 以MB为单位显示
		-g: 以GB为单位显示
	
	■ 缓存和缓冲的区别
		简单来说缓存（cache）是用来加速数据从硬盘中"读取"的，而缓冲（buffer）是用来加速数据"写入"硬盘的。
		
	■ 查看cpu的信息比dmesg |grep CPU更加详细
	[root@bogon ~]# cat /proc/cpuinfo
	processor	: 0
	vendor_id	: GenuineIntel
	cpu family	: 6
	model		: 158
	model name	: Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz
	stepping	: 9
	cpu MHz		: 2807.998
	cache size	: 6144 KB
	physical id	: 0
	siblings	: 1
	core id		: 0
	cpu cores	: 1
	apicid		: 0
	initial apicid	: 0
	fpu		: yes
	fpu_exception	: yes
	cpuid level	: 22
	wp		: yes
	flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc pni pclmulqdq monitor ssse3 cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch avx2 rdseed clflushopt
	bogomips	: 5615.99
	clflush size	: 64
	cache_alignment	: 64
	address sizes	: 39 bits physical, 48 bits virtual
	power management:
	
	
	
	
【计划任务】
	1、crond 服务管理与访问控制
	[root@localhost ~]# service crond restart #手工启动命令
	[root@localhost ~]# chkconfig croud on    #手工启动命令
	提示： crond 是linux系统默认安装和启动的
	 [root@localhost ~]# crontab [选项]
	 选项：
		-e: 编辑crontab定时任务
		-l: 查询crontab任务
		-r: 删除当前用户所有的crontab任务
	[root@localhost ~]# crontab -e 
	#进入crontab 编辑界面。会打开vim编辑你的工作。
	* * * * * 执行的任务
	+-------------+-------------------------+--------------------------+
	|	项目	  | 		含义 			|	范围				   |
	+-------------+-------------------------+--------------------------+
	| 第一个 ”*“  | 一小时当中的第几分钟	|	0-59				   |
	+-------------+-------------------------+--------------------------+
	| 第二个 ”*“  | 一天当中的第几小时		|	0-23				   |
	+-------------+-------------------------+--------------------------+
	| 第三个 ”*“  | 一个月当中的第几天		|	0-31				   |
	+-------------+-------------------------+--------------------------+	
	| 第四个 ”*“  | 一年当中的第几个月		|	0-12				   |
	+-------------+-------------------------+--------------------------+
	| 第五个 ”*“  | 一周当中的星期几		|	0-7（0和7都代表星期日）|
	+-------------+-------------------------+--------------------------+
案例：
	+--------------------+---------------------------------------------------+
	|	时间	  		 | 		含义 								   		 |
	+--------------------+---------------------------------------------------+
	| 45 22 * * *  命令  | 在22点45分执行命令						   		 |
	+--------------------+---------------------------------------------------+
	| 0 17 * * 1   命令	 | 每周1 的 17点0分执行命令	   	  				     |
	+--------------------+---------------------------------------------------+
	| 0 5 1,15 * * 命令  | 每月1号和15号的凌晨5点0分执行命令			     |
	+--------------------+---------------------------------------------------+	
	| 40 4 * * 1-5 命令  | 每周1到周5的凌晨4点40分执行命令			   	     |
	+--------------------+---------------------------------------------------+
	| */10 4 * * * 命令  | 每天的凌晨4点，每隔10分钟执行一次命令			 |
	+--------------------+---------------------------------------------------+	
	| 0 0 1,15 * 1 命令  | 每月1号和15号，每周1的0点0分都会执行命令。注意：星|
	|					 | 期几和几号最好不要同时出现，因为他们定义的都是天。|
	|					 | 非常容易让管理员混乱。							 |
	+--------------------+---------------------------------------------------+		
	
	+--------------------+---------------------------------------------------+
	|	特殊符号		 | 		含义 								   		 |
	+--------------------+---------------------------------------------------+
	| *  				 | 代表任何时间。比如第一个 "*" 就代表一小时中每分钟 |
	|					 | 都执行一次的意思。						   		 |
	+--------------------+---------------------------------------------------+
	| ,	  				 | 代表不连续的时间。比如”0 8,12,16 * * * 命令“，就代|
						 | 表在每天的8点0分，12点0分，16点0分都执行一次命令  |
	+--------------------+---------------------------------------------------+
	| -   				 | 代表连续的时间范围。比如"0 5 * * 1-6 命令"，代表在|
	|					 | 周一到周六的凌晨5点0分执行命令。			    	 |
	+--------------------+---------------------------------------------------+	
	| */n 				 | 代表每隔多久执行一次。比如"*/10 * * * *" 命令，代 |
	|					 | 表每隔10分钟就执行一遍命令。		   	     		 |
	+--------------------+---------------------------------------------------+

举例：
	*/5 * * * * /bin/echo "11"  >> /tmp/test  //每5分钟写11到 test文件
	5 5 * * 2 /sbin/shutdown -r now    //每周2的凌晨 5点5分重启任务
	0 5 1,10,15 * * /root/sh/autobak.sh  //每个月的 1号10号15号 凌晨5点整 都执行这个脚本
	
	
	
	
	crontab -e */2 12-14 * * 1-5 test.apache  #后面的test.apache脚本要写绝对路径

	
【日志管理】	
	[root@localhost ~]# ps aux|grep rsyslogd
	#查看服务是否启动
	
	chkconfig --list | grep rsyslog
	#查看服务是否自启动
	
	
	■ 常见日志的作用
	+--------------------+---------------------------------------------------+
	|	日志文件	  	 | 		说 明								   		 |
	+--------------------+---------------------------------------------------+
	| /var/log/cron      | 记录了系统定时任务相关的日志						 |
	+--------------------+---------------------------------------------------+
	| /var/log/cups/ 	 | 记录打印信息的日志 		   	  				     |
	+--------------------+---------------------------------------------------+
	| /var/log/dmesg/    | 记录了系统在开机时内核自检的信息。也可以使用dmesg |
	|					 | 命令直接查看内核自检信息。		  			     |
	+--------------------+---------------------------------------------------+	
	| /var/log/btmp      | 记录错误登录的日志。这个文件是二进制文件，不能直接|
	|					 | vi查看，而要使用lastb命令查看，命令如下：  	     |
	|					 | [root@localhost log]# lastb						 |
	|					 | root tty1 	  	 Tue Jun 4 22:30 - 22:30 (00:00) |
	|					 | #有人在6月4日22:38使用root用户，在本地终端1登录错 |
	|					 | 误。												 |
	+--------------------+---------------------------------------------------+
	| /var/log/lastlog   | 记录系统中所有用户最后一次的登录时间的日志。这个文|
	|					 | 件也是二进制文件，不能直接vi,而要使用lastlog命令	 |
	|					 | 查看。										  	 |
	+--------------------+---------------------------------------------------+	
	| 				     | 记录系统重要信息的日志。这个日志文件中会记录Linux |
	| /var/log/message	 | 系统的绝大多数重要信息，如果系统出现问题时，先要检|
	|					 | 查的就应该是这个日志文件	 						 |
	+--------------------+---------------------------------------------------+
	| /var/log/mailog	 | 记录邮件信息。									 |
	+--------------------+---------------------------------------------------+
	| 					 | 记录验证和授权方面的信息，只要涉及账户和密码的程序|
	| /var/log/secure	 | 都会记录。比如说系统的登录，ssh的登录，su切换用户 |
	|					 | ，sudo授权，甚至添加用户和修改用户密码都会记录在这|
	|					 | 个日志文件中。									 |
	+--------------------+---------------------------------------------------+	
	| 					 | 永久记录所有用户的登录，注销信息，同时记录系统的启|
	| /var/log/wtmp 	 | 动、重启、关机事件，同样这个文件也是一个二进制文件|
	|					 | ，不能直接vi,而需要使用last命令来查看			 |
	+--------------------+---------------------------------------------------+	
	| 					 | 记录当前已经登录的用户的信息，这个文件会随着用户的|
	| /var/run/utmp 	 | 登录和注销而不断变化，只记录当前登录用户的信息。同|
	|					 | 	样这个文件不能直接vi,而需要使用w,who,users等命令 |
	|					 |	来查询。										 |
	+--------------------+---------------------------------------------------+

		除了系统默认的日志之外，采用RPM方法安装的系统服务也会默认把日志记录在 /var/log 
	目录中（源码包安装的服务日志是在源码包指定目录中）。不过这些日志不是由rsyslogd服务
	来记录和管理的，而是各个服务使用自己的日志管理文档来记录自身日志。
	+--------------------+---------------------------------------------------+	
	| /var/log/httpd/	 | RPM 包安装的apache服务的默认日志目录				 |
	+--------------------+---------------------------------------------------+	
	| /var/log/mail/	 | RPM 包安装的邮件服务的额外日志目录			 	 |
	+--------------------+---------------------------------------------------+		
	| /var/log/samba/	 | RPM 包安装的samba服务的日志目录				 	 |
	+--------------------+---------------------------------------------------+		
	| /var/log/sssd/	 | 守护进程安全服务目录							 	 |
	+--------------------+---------------------------------------------------+	
	
	■ 1、日志文件格式
	
		基本日志格式包含以下四列：
			事件产生的时间；
			发生事件的服务器的主机名；
			产生事件的服务名或程序名；
			事件的具体信息。
			
	■ 2、/etc/rsyslog.conf 配置文件
	
		authpriv.*   							/var/log/secure 
		
		#服务名称[连接符号]日志等级				日志记录位置
		#认证相关服务。所有日志等级				记录在
		/var/log/secure 日志中					
	■ 连接符号
		连接符号可以识别为：
				"*" 代表所有日志等级，比如："authpriv.*" 代表authpriv 认证信息服务产生的日志，所有的日志等级都记录。
				
				"." 代表只要比后面的等级高的（包含该等级）日志都记录下来。比如："cron.info"代表cron服务产生的日志，
			只要日志等级大于inof级别，就记录
			
				".-" 代表只记录所需等级的日志，其他等级的都不记录。比如："*.=emerg" 代表人和日志服务产生的日志，
			只要等级是emerg等级就记录。这种用法及少见，了解就好。
			
				".!" 代表不等于，也就是除了该等级的日志外，其他等级的日志都记录。
				
	+--------------------+---------------------------------------------------+	
	| 		服务名称	 | 			说		明			 					 |
	+--------------------+---------------------------------------------------+	
	| auth				 | 安全和认证相关信息（不推荐使用authpriv代替）		 |
	+--------------------+---------------------------------------------------+		
	| authpriv	 		 | 安全和认证相关信息（私有的）				 	 	 |
	+--------------------+---------------------------------------------------+		
	| cron				 | 系统定时任务cront和at 产生的日志					 |
	+--------------------+---------------------------------------------------+		
	| daemon			 | 和各个守护进程相关的日志				 			 |
	+--------------------+---------------------------------------------------+			
	| ftp			 	 | ftp守护进程产生的日志				 			 |
	+--------------------+---------------------------------------------------+
	| kern			 	 | 内核产生的日志（不是用户进程产生的）			 	 |
	+--------------------+---------------------------------------------------+	
	| local0-local7		 | 为本地使用预留的服务							 	 |
	+--------------------+---------------------------------------------------+
	| lpr				 | 打印产生的日志						 			 |
	+--------------------+---------------------------------------------------+	
	| mail				 | 邮件收发信息							 			 |
	+--------------------+---------------------------------------------------+
	| news				 | 与新闻服务器相关的日志						 	 |
	+--------------------+---------------------------------------------------+
	| nsyslog			 | 有syslogd服务产生的日志信息（虽然服务名称已经改为 |
	|					 | rsyslogd,但是很多配置都还是沿用了syslogd的，这里并|
	|					 | 没有修改服务名）。					 	 		 |
	+--------------------+---------------------------------------------------+		
	
■日志等级
	+--------------------+---------------------------------------------------+
	| 		等级名称	 | 			说		明			 					 |
	+--------------------+---------------------------------------------------+
	| debug				 | 一般的调试信息说明								 |
	+--------------------+---------------------------------------------------+
	| info		 		 | 基本的通知信息							 	 	 |
	+--------------------+---------------------------------------------------+
	| notice			 | 普通信息，但是有一定的重要性						 |
	+--------------------+---------------------------------------------------+
	| warning			 | 警告信息，但是还不会影响到服务或系统的运行		 |
	+--------------------+---------------------------------------------------+
	| err			 	 | 错误信息，一般达到err等级的信息以及可以影响到服务 |
	|					 |或系统的运行了				 					 |
	+--------------------+---------------------------------------------------+
	| crit			 	 | 临界状况信息，比err等级还要严重				 	 |
	+--------------------+---------------------------------------------------+
	| alert				 | 警告状态信息，比crit还有严重。必须立即采取行动	 |
	+--------------------+---------------------------------------------------+
	| emerg 			 | 疼痛等级信息，系统已经无法使用了					 |
	+--------------------+---------------------------------------------------+ 
	
■ 日志记录位置
	日志文件的绝对路径，如"/var/log/secure"
	系统设备文件，如"/dev/lp0"
	转发给远程主机，如"@192.168.0.210:514"
	用户名，如"root"
	忽略或丢弃日志，如 "~"
	
■ 日志轮替	
	1、日志文件的命名规则
			如果配置文件中拥有 "dateext" 参数，那么日志会用日期来作为日志文件的后缀，
		例如 "secure-20130605"。这样的话日志文件名不会重叠，所以也就不需要日志文
		件的改名，只需要保存指定的日志个数，删除多余的日志文件即可。
			如果配置文件中没有 "dateext" 参数，那么日志文件就需要进行改名了。当第一
		次进行日志轮替时，当前的 "secure"日志会自动改名为 "secure.1"，然后新建 "secure"
		日志，用来保存新的日志。当第二次进行日志轮替时，"secure.1" 会自动改名为 "secure.2" 
		，当前的 "secure" 日志会自动改名为 "secure.1"，然后也会新建 "secure" 日志，用来保
		存新的日志，以此类推。
	2、logrotate 配置文件
	
	+--------------------+---------------------------------------------------+
	| 		参数  	     | 			参数说明			 					 |
	+--------------------+---------------------------------------------------+
	| daily				 | 日志的轮替周期是每天								 |
	+--------------------+---------------------------------------------------+
	| weekly		 	 | 日志的轮替周期是每周						 	 	 |
	+--------------------+---------------------------------------------------+
	| monthly			 | 日志的轮替周期是每月								 |
	+--------------------+---------------------------------------------------+
	| rotate 数字		 | 保留的日志文件的个数。0指没有备份				 |
	+--------------------+---------------------------------------------------+
	| compress			 | 日志轮替时，旧的日志进行压缩						 |
	+--------------------+---------------------------------------------------+
	| create mode owner	 | 建立新日志，同时指定新日志的权限与所有者和所属组。|
	| group				 | 如create 0600 root utmp 							 |
	+--------------------+---------------------------------------------------+
	| mail address  	 | 当日志轮替时，输出内容通过邮件发送到指定的邮件地  |
	|    				 | 址。如mail shenc@lamp.net						 |
	+--------------------+---------------------------------------------------+
	| missingok			 | 如果日志不存在，则忽略该日志的警告信息			 |
	+--------------------+---------------------------------------------------+	
	| notifempty		 | 如果日志为空文件，则不进行日志轮替				 |
	+--------------------+---------------------------------------------------+		
	| minsize	大小	 | 日志轮替的最小值。也就是日志一定要达到这个最小值才|
	|    				 | 会轮替，否则就算时间达到也不轮替  				 |
	+--------------------+---------------------------------------------------+	
	|   size	大小	 | 日志只有大于指定大小才进行日志轮替，而不是按照时  |
	|    				 | 间轮替。如size 100k								 |
	+--------------------+---------------------------------------------------+	
	|   dateext	    	 | 使用日期作为日志轮替文件的后缀。如secure-20130605 |
	+--------------------+---------------------------------------------------+		
	
	3、把apache日志加入轮替
	[root@localhost ~]# vim /etc/logrotate.conf 
	/usr/local/apache2/logs/access_og{
		daily  		#每天备份
		create  	#备份时创建新的文件
		rotate 30   #保留30天
	}
	
	4、logrotate 命令 
	[root@localhost ~]# logrotate [选项] 配置文件名
	例：
	[root@bogon ~]# logrotate -v /etc/logrotate.conf 
	
	找到 ” Handling 19 logs “ 表示有19个需要轮替的日志
	选项：
		如果此命令没有选项，则会按照配置文件中的条件进行日志轮替
		-v：显示日志轮替过程。加了 -v 选项，会显示日志的轮替的过程
		-f：强制进行日志轮替。不管日志轮替的条件是否已经符合，强
	制配置文件中所有的日志进行轮替
	
【挂载光盘yum源】
	[root@localhost ~]# mkdir /tmp/dvd  
	[root@localhost ~]#  ll /tmp/dvd/ 
	total 0
	[root@localhost ~]# ll /tmp/dvd/
	[root@localhost ~]# df  -hT  
	Filesystem              Type      Size  Used Avail Use% Mounted on
	/dev/mapper/centos-root xfs        17G  3.6G   14G  21% /
	devtmpfs                devtmpfs  481M     0  481M   0% /dev
	tmpfs                   tmpfs     497M     0  497M   0% /dev/shm
	tmpfs                   tmpfs     497M  7.0M  490M   2% /run
	tmpfs                   tmpfs     497M     0  497M   0% /sys/fs/cgroup
	/dev/sda1               xfs      1014M  160M  855M  16% /boot
	tmpfs                   tmpfs     100M   24K  100M   1% /run/user/1000
	tmpfs                   tmpfs     100M     0  100M   0% /run/user/0
	/dev/sr0                iso9660   8.1G  8.1G     0 100% /tmp/dvd	#光盘分区
	[root@localhost ~]# mount -t auto /dev/sr0 /tmp/dvd
	mount: /dev/sr0 is write-protected, mounting read-only  
    
	[root@localhost ~]# mount #查看是否挂载成功
	
	.......
	
	/dev/sr0 on /run/media/roye/CentOS 7 x86_64 type iso9660 (ro,nosuid,nodev,relatime,uid=1000,gid=1000,iocharset=utf8,mode=0400,dmode=0500,uhelper=udisks2)
	/dev/sr0 on /tmp/dvd type iso9660 (ro,relatime,uid=1000,gid=1000,iocharset=utf8,mode=0400,dmode=0500)   #看到 /dev/sr0 on /tmp/dvd type iso9660 表示挂载成功
    
	修改yum源配置，把CentOS-Base.repo文件备份
	[root@localhost ~]# cd /etc/yum.repos.d/
	[root@localhost ~]# cp CentOS-Base.repo CentOS-Base.repo.bak
	
	
	修改CentOS-Base.repo的内容，注释文档中的所有mirrorlist属性，把baseurl属性打开注释，并设置baseurl的属性值为挂载点
	baseurl=file:///tmp/dvd
	
	如下所示：
	# CentOS-Base.repo
	#
	# The mirror system uses the connecting IP address of the client and the
	# update status of each mirror to pick mirrors that are updated to and
	# geographically close to the client.  You should use this for CentOS updates
	# unless you are manually picking other mirrors.
	#
	# If the mirrorlist= does not work for you, as a fall back you can try the 
	# remarked out baseurl= line instead.
	#
	#
	
	[base]
	name=CentOS-$releasever - Base
	#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os&infra=$infra
	#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
	baseurl=file:///tmp/dvd/
	gpgcheck=1
	gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
	
	#released updates 
	[updates]
	name=CentOS-$releasever - Updates
	#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates&infra=$infra
	#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/
	baseurl=file:///tmp/dvd/
	gpgcheck=1
	gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
	
	#additional packages that may be useful
	[extras]
	name=CentOS-$releasever - Extras
	#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=extras&infra=$infra
	"CentOS-Base.repo" 48L, 1768C 
	
	
	保存，退出编辑。
	清空yum已存在的所有源信息
	[root@localhost ~]# yum clean all
	
	查看本地源的所有软件
	[root@localhost ~]# yum list
	
	
	如果想要恢复使用网络上的源，再次把CentOS-Base.repo.bak重命名为CentOS-Base.repo就可以了
	注意系统重启之后，需要再次手动挂载，如果需要的话，可以设置/media/CentOS自动挂载。在/etc/fstab配置文件中新添加一行，表示自动挂载/media/CentOS。如下所示：
	[root@localhost ~]# /etc/fstab
	#
	# /etc/fstab
	# Created by anaconda on Thu Aug 16 02:28:58 2018
	#
	# Accessible filesystems, by reference, are maintained under '/dev/disk'
	# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
	#
	/dev/mapper/centos-root /                       xfs     defaults        0 0
	UUID=d2477636-aa9f-447e-993b-6f87c306e6e8 /boot                   xfs     defaults        0 0
	/dev/mapper/centos-swap swap                    swap    defaults        0 0
	/dev/sr0 	 /tmp/dvd    iso9660  ro,relatime  0  0
	
【linux 更新yum源 改成阿里云源】	
	

	1、备份
	mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
	
	2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/
	
	
	CentOS 5
	wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo
	
	或者
	
	curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo
	
	
	CentOS 6
	wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
	
	或者
	
	curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
	
	
	CentOS 7
	wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
	
	或者
	
	curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
	
	
	
	3、之后运行yum makecache生成缓存	
	[root@localhost ~]# yum makecache
	[root@localhost ~]# yum clean all
	[root@localhost ~]# yum list
	
	
【CentOS7防火墙开启和关闭端口】
	[root@bogon openvpn]# firewall-cmd --permanent --zone=public --add-port=3306/tcp
	success			#封火墙开启3306端口成功
	
	[root@bogon openvpn]# firewall-cmd --permanent --query-port=3306/tcp #查询防火墙是否开启 3306端口
	yes				#表示开启
	[root@bogon openvpn]# firewall-cmd --permanent --query-port=8080/tcp #防火墙未开启8080端口状态
	no
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	