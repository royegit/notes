■ 1.VPN介绍

◼ 1.1VPN 概述
		VPN(全称 Virtual Private Network)虚拟专用网络，是依靠ISP和其他NSP，在公共网络中建立专用的数据通信网络的技术，
	可以为企业之间或者个人与企业之间提供安全的数据传输隧道服务。在VPN中任意两点之间的链接并没有传统专网所需的端到端
	的物理链路，而是利用公共网络资源动态组成的，可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功
	能的点到点的专线技术，所谓虚拟是指不需要去拉实际的长途物理线路，而是借用了公共Internet网络实现
	
	为了便于大家理解，给一个直观的形象图：
			
			牛郎==================织女
						鹊桥
						
		提示：我们曾经都用过什么类似VPN的隧道么？ 解答：Ssh,LVS TUN(ipip),Pptp,ipsec

▪ 1.1.2 VPN 的作用			
		 VPN功能可以帮助公司里远程用户（出差，家里）、公司的分枝机构、商业合作伙伴及应用商等公司和自己的公司内部网络之
	间建立可信的安全链接或者是局域网链接，确保数据的加密安全传输和业务访问，对于运维工程师来说，还可以链接不同的机房为
	局域网，处理相关的业务流，我们可以通过一张网络逻辑图为大家描述VPN的作用。
	
		
▪ 1.1.3 VPN 的分类
		1、远程访问VPN服务
		 即通过个人电脑远程拨号到企业办公室网络。
		 a.一般为企业内部员工出差、休假或特殊情况下在远离办公室的时候，又有需求访问公司的内部网络获取相关资源，就可以通
	过VPN拨号到公司内部。此时远程拨号的员工和办公室内的员工以及其他拨号的员工之间都相当于一个局域网络内。例如：访问内部
	的域控制器，文件服务器，OA系统，ERP，HTTP服务，内网飞秋聊天工具等局域网服务应用。
		 b.对于运维人员就是需要个人电脑远程拨号到企业网站IDC机房，远程维护IDC内网服务器。（一般无外网IP，数据库，存储）
	此点是技术人员特别是运维人员在工作中会经常用这个方法维护大量的机房内无外网IP的服务器及网络设备。
	讲解就业班架构图：牤牛阵法
		2、企业内部网络之间VPN服务
		在公司分支机构的局域网和公司总部LAN之间VPN链接。通过公网Internet建立VPN将公司在各地的分支机构的LAN连接到公司总部
	的LAN。例如：各大超市之间业务结算等。
		这是由于地域的原因而产生的VPN的需求，通过VPN让步同地域的机器可以互相访问，就好像是一个局域网一样。例如：办公室互
	联协同办公，机房互联数据同步及业务访问等。
		3、互联网公司多IDC机房之间VPN服务
		此处是运维架构人员需要考虑的问题。步同机房之间业务管理和业务访问，数据流动
		4、企业外部VPN服务
		在供应商、合作伙伴的LAN和本公司的LAN之间建立的VPN服务
		5、访问国外的网站
		翻墙业务应用
		 
▪ 1.1.4 常见的隧道协议介绍
	
			1.1.4.1点对点隧道协议（PPTP）是由包括微软和3Com等公司组成的PPTP论坛开发的一种点对点隧道协议，基于拨号使用的PPP协议，使
		用PAP或CHAP之类的加密算法，或者使用Microsoft的点对点加密算法MPPE。其通过跨越基于  TCP/IP 的数据网络创建VPN实现了从远程客户
		端到专用企业服务器之间数据的安全传输。PPTP支持通过公共网络（例入Internet）建立按需的、多协议的、虚拟专用网络。PPTP允许加密
		IP通讯，然后在要跨越公司IP网络或公共IP网络（如Internet）发送的IP头中对其进行封装。典型的linux平台的开源软件为pptp。

▪ 1.1.5 实现VPN功能的常见开源产品		 
		◾ 4.1.5.1 PPTP VPN 
			使用PPTP VPN 的最大优势在于，无需在windows客户端单独安装客户端软件，windows默认就支持 PPTP VPN 拨号连接功能。另外，
		PPTP VPN属于点对点方式的应用，比较适合远程的企业用户拨号到企业进行办公等应用。很多小区及网络设备不支持PPTP导致无法访问。
		典型的linux平台开源软件为pptp
		
		◾ 4.1.5.2 SSL VPN(OPENVPN)
			PPTP主要为那些经常外出移动或家庭办公的用户考虑，而OpenVPN  不单使用于PPTP的应用场景，还适合针对企业异地两地总分公
		司之间的VPN不间断按需连接，例如：ERP,OA,及时通讯工具等在企业中的应用。
		缺点：需要单独安装客户端软件
		
		
		◾ 4.1.5.3 IPSEC VPN 
			IPSEC VPN 也适合针对企业异地两地总分公司或多个IDC机房之间VPN不间断按需连接，并且在部署使用商更简单方便。
			ipsec vpn 的开源产品 openswan。
		 
◾ 1.1.6 根据企业生产场景需求选择vpn方案建议
		1、如果领导愿意花钱，可以选择相关硬件产品，不错的成熟的很多，例如：防火墙、负载均衡等硬件产品都附带VPN功能。（运维架构师的价值）
		2、对于多数互联网公司，为了体现我们运维架构师的价值，我们应该建议老板选择开源产品，优势就是生钱，可扩展性更
		强，（每个机房可以有高可用）例如：二次开发，相应的改动。
		3、对于开源的产品，老男孩老师建议：
			a.个人拨号选择openvpn，功能强大、稳定可靠。
			b.如果老大不希望单独安装客户端拨号，则可选择PPTP，但是尽量打消老大使用PPTP的想法。
			c.多个企业之间或者多个IDC机房直接互联，选择ipsec vpn（openswan） 或 openvpn。
		 
		4、老男孩架构师培训讲解：openvpn，ipsec vpn 的完整企业实现。可以满足各种企业需求。
		 
◼ 1.2 openvpn开源产品		 
		 
◾ 1.2.1 openvpn 产品介绍
			在众多vpn的产品中，OpenVPN无疑是linux下开源VPN的先锋，它提供了良好的访问性能和友好的用户GUI。
			OpenVPN是一个用于创建虚拟专用网络加密通道的软件包，最早由James Yonan编写。OpenVPN允许参与建立
		VPN的单点使用预设的私钥，第三方证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库，以
		及SSLv1协议。OpenVPN能在Linux、xBSD、Mac OS X 与 Windows 上运行。Openvpn是一个服务器和客户端软件，
		而不是一个基于Web 的VPN软件，也不与IPsec及其他VPN软件包兼容。
			官方介绍，见老男孩linux培训-openvpn how-to

◾ 1.2.2 openvpn 依赖的SSL与TLS协议介绍
		SSL 即，安全套接层（Secure Sockets Layer,SSL）是一种安全协议诞生的目的是为网络通信提供安全及数据完整性保障，SSL在传输
	层中对网络通信进行加密。
		SSL采用公开密钥技术，保证两个用于间通信的保密性和可靠性，使客户与服务器应用之间保密通讯的工业标准。现行的 Web 浏览器亦
	普遍将 HTTP 和 SSL 相结合，从而实现安全通信。SSL 协议其继任者是TLS。
		后来IETF（www.ietf.org）将SSL作了标准化，即RFC2246，并将其称为TLS(Transport Layer Security)，其最新版本是 RFC 5246，版
	本1.2。从技术上讲，TLS1.0 与 SSL3.0 的差异非常微小。
		TLS(Transport Layer Security)
		TLS 利用密钥算法在互联网上提供端点身份认证与通讯保密，其基础是公钥基础设施(public key infrastructure, PKI)。不过在实现
	的典型例子中，只有网络服务者被可靠身份验证，而其客户端则不一定。这是因为公钥基础设施普遍商业运营，电子签名证书通常需要付费
	购买。协议的设计在某种程度上能够使主从架构应用程序通讯本身预防窃听、干扰（Tampering）和消息伪造。
		 
◾ 1.2.3 openvpn 的加密通讯原理过程
		OpenVPN使用 TLS 加密是通过使用公开密钥（非对称密钥，加密解密使用不同的key，一个称为Public key，另一个是Private key）对
	数据进行加密的，对于TLS传输的工作原理，这里暂且先不介绍。对于Open VPN使用TLS mode，首先Server和Client要有相同CA签发的证书，
	双方通过交换证书验证双方的合法性以决定是否建立VPN连接，然后使用对方CA把自己目前使用的数据加密方法（类似于密钥）加密后发送给
	对方，由于使用对方CA加密的，所以只有对方CA对应的 Private key 才能解密该字串，保证了此密钥的安全性，并且此密钥定期改变，对于
	窃听者来说，可能还没有破解出密钥，通信双方以及更换密钥了。
		 
◾ 1.2.4 openvpn 的多种身份验证方式
		OpenVPN 提供了多种身份验证方式，用以确认参与连接双方的身份，包括：预享私钥，第三方证书以及用户名/密码组合等。预享密钥最
	为简单，但同时它只能用于建立点对点的VPN：基于KPI的第三方认证书提供了最完善的功能，但是需要额外的精力去维护一个PKI证书体系。
	OpenVPN2.0后引入了用户名/口令组合的身份验证方式，它可以省略客户端预享密钥，但是仍有一份服务器CA证书需要被用作加密，比较好的
	验证方式还有LDAP或域控制器统一验证等。更多验证方式后文讲解。

◾ 1.2.5 openvpn 通信原理
		OpenVPN所有的通信都基于一个单一的IP端口（默认为1194），默认使用UDP协议通讯，同时TCP也被支持OpenVPN连接能通过大多数的代理
	服务器，并且能够在NAT的环境中很好地工作。OpenVPN服务端具有向客户端"推送"某些网络配置信息的功能，这些信息包括：IP地址、路由设
	置等。OpenVPN提供了两种虚拟网络接口：通用Tun/Tap驱动，通过它们，可以建立三层IP隧道，或者虚拟二层以太网，后者可以传送任何类型
	的二层以太网络数据。传送数据可通过LZO算法压缩。OpenVPN2.0以后版本每个进程可以同时管理数个并发隧道。
		OpenVPN使用通用网络协议（TCP与UDP）的特点使它成为IPsec等协议的理想替代，尤其是在ISP（Internet service provider）过滤某些
	特定VPN协议的情况下。
		在选择协议时候，需要注意2个加密隧道之间的网络状况，如有高挺或者丢包较多的情况下，请先择TCP协议作为底层协议，UDP协议由于存
	在无连接和重传机制，导致要隧道上层的协议进行重传，效率非常低下。这里建议用TCP协议方式。
		参考：
		http://www.baike.com/wiki/OpenVPN 
		http://zh.wikipedia.org/zh-cn/OpenVPN 
		OpenVPN的技术核心是虚拟网卡，其次是SSL协议，SSL协议签名己阐述过，这里重点对虚拟网卡及其在OpenVpn的中的工作机理进行介绍：
		虚拟网卡是使用网络底层编程技术实现的一个驱动软件，安装后在主机上多出一个网卡，可以像其他网卡发送数据，则服务程序可以在应
	用层打开虚拟网卡，如果应用软件（如IE）向虚拟网卡发送数据，则服务程序可以读取到该数据，如果服务程序写合适的数据到虚拟网卡
	，应用软件也可以接收得到。虚拟网卡在很多的操作系统下都有相应的实现，这也是OpenVpn能够跨平台一个很重要的理由。
		在OpenVpn中，如果用户访问一个远程虚拟地址（属于虚拟网卡配用地址系列，区别于真实地址），则操作系统会通过路由机制将数据包（
	（TUN模式）或数据帧（TAP模式）发送到虚拟网卡上，服务程序接收该数据并进行相应的处理后，通过SOCKET从外网上发送出去，远程服务程
	序通过SOCKET从外网上接收数据，并进行相应处理后，发送给虚拟网卡，则应用软件可以接收到，完成了一个单向传输过程，反之亦然。
		OpenVPN使用OpenSSL库加密数据于控制信息：它使用了OpenSSL的加密以及验证功能，意味着，它能够使用任何OpenSSL支持的算法。它提
	供了可选数据包HMAC功能以提高连接的安全性。此外，OpenSSL的硬件加速也能提高它的性能。
		1、openvpn驱动部分实现了网卡处理和字符设备。网卡处理网络数据，字符设备完成与应用层的数据交互。
		2、使用openvpn必须修改路由表
		工作过程 发送数据：
		1、应用程序发送网络数据
		2、网络数据根据修改后的路由表把数据路由到虚拟网卡
		3、虚拟网卡把数据放到数据队列中
		4、字符设备从数据队列中取数据，然后送给应用层
		5、应用层把数据转发给物理网卡
		6、物理网卡发送数据
		
		接收过程：
		1、物理网卡接受到数据，并传送到应用空间
		2、应用守护程序通过字符设备把数据转给驱动网卡
		3、数据通过虚拟网卡重新进入网络推荐
		4、网络推荐把数据传给上层真实的应用程序。

◾ 1.2.6 openvpn 生产环境常用场景：
	◾ 1.2.6.1 远程拨号访问企业网络或IDC机房
		即通过个人电脑远程拨号到企业办公网络。
		一般为企业内部员工出差、休假或特殊情况下在远离办公室的时候，又有需求访问公司的内部网络获取相关资源，就可以通过VPN拨号到公
	司内部。网络获取相关资源，就可以通过VPN拨号到公司内部。此时远程拨号的员工和办公室的员工以及其他拨号的员工之间都相当于一个局域
	网络内。例如：访问内部的域控制器，文件服务器，OA系统，HTTP服务，内网飞秋聊天工具等局域网服务应用。
		对于运维人员就是需要个人电脑远程拨号到企业网站IDC机房，远程维护服务器。
		此点是技术人员特别是运维人员在工作中会经常用这个方法维护大量的机房内无外网IP的服务机器及网络设备。
		讲解就业班架构图：牤牛阵法
	◾ 1.2.6.2 企业异地内部网络通过VPN连接成局域网
		在公司的分支机构的局域网和公司总部LAN之间的VPN连接。通过公网Internet建立VPN将公司在各地的分支机构的LAN连接到公司总部的LAN。
	例如：各大超市之间业务结算等。
		这是由于地域的原因而产生的VPN的需求，通过VPN让步同地域内的机器可以互相访问，就好像是一个局域网一样。例如：办公室互联协同办
	公，机房互联数据同步及业务访问等。
	
	◾ 1.2.6.3 互联网公司多IDC机房之间通过VPN连接交换数据
		此处是运维架构人员需要考虑的问题。不同机房之间业务管理和业务访问，数据流动。
	
	◾ 1.2.6.4 企业外部 VPN服务
		在供应商、合作伙伴的LAN和本公司的LAN之间建立VPN服务。
		从技术上讲，2，3，4的实现是一样的。


◾ 1.2.7	 企业产生场景常用VPN工作结构图
	◾ 1.2.7.1企业vpn远程拨号访问场景逻辑图	
			┌------------------------------------------------------------------------------┐
			|								IDC 三元桥机房							       |
			| ┌──────────────────┐									┌────────────────────┐ |
			| │|--keys			 │\									│				  	 │ |
			| │|  |--ca.crt		 │ \							  ╱ Lan Server1  	  	 │ |
			| │|  |--ca.key 	 │  \┌────────────────────┐	    ╱	│ eth0:192.168.1.100 │ |
			| │|  |--db1024.pem  │   │  Vpn Server	      │	  ╱	│				  	 │ |
			| │|  |--server.crt  │   │ eth0:10.0.2.15     │	╱		└────────────────────┘ |
			| │|  |--server.csr  │   │ eth1:192.168.1.104 │	╲							   |
			| │|  |--server.key  │  /└────────────────────┘	  ╲	┌────────────────────┐ |
			| │|  `--ta.key      │ /	 /			\			╲	│				     │ |
			| │`--server.conf	 │/ 	/			 \		  	  ╲  Lan Server2	     │ |	 
			| └──────────────────┘	   /			  \				│ eth0:192.168.1.100 │ |
			|						  /				   \			│				     │ |
			|						 /				    \			└────────────────────┘ |
			|					    /				┌──────────────────────┐			   |
			|					   /				│ 目地址：192.168.1/24 │			   |
			|					  /					│ 源地址：192.168.0/24 │			   |
			|					 /					└──────────────────────┘			   |
			└-------------------/----------------------------------------------------------┘
				 |			   / 
				 |			  /
 ┌----------------------┐    / ┌-----------------------┐
 |	    远程拨号	  	|   /  |目地址：192.168.1.0/24 |
 └----------------------┘  /   |源地址：10.8.0.6/24    |
						  /    └-----------------------┘
	                     /		|
						/		|	   ┌────────────────────────────────┐
					   /		|     /│								│
					  /			|    / │								│
	    		 ┌──────────────────┐  │								│
				 │					│  │ D:\data\OpenVPN\config\oldboy  │
				 │					│  │ 📰ca.crt						│
				 │	   我们的办		│  │ 📰oldboy.crt					│
				 │	   				│  │ 📄oldboy.key					│
				 │     公室电脑		│  │ 📄oldboy_vpn.ovpn			    │
				 │	   			  	│  │ 路由：push"reute 172.16.1.0.." │
				 │				    │  │								│
				 └──────────────────┘  │								│
									 \ │								│
									  \│								│
									   └────────────────────────────────┘

									   
									   
									   
									   
					
◾ 1.2.8	 生产场景逻辑图详细描述
			在本文讲解的VPN环境中如上图当用户从家里拨号上网后，通过openvpn client软件可以拨号到Openvpn Server(ip:124.43.12.115)上，
		此时，在个人比较本和Ppenvpn Server之间会建立一个加密的专用隧道（默认会使用10.6.27.0段的IP），使得个人笔记本可以访问到
		Openvpn Server的内网卡 IP 地址（127.16.1.161），但是，此时通过比较本直接访问和Openvpn Server相同的内部局域网中的其他Server
		(ip:172.16.1.13)是访问不到的，因为Openvpn Server不知道如何帮你转发这个访问请求。
			生产环境中的常用做法是，当个人比较本连接上Openvpn Server之后，在Openvpn Server上加入一条防火墙 NAT 规则（部署时人工增加
		），使得当笔记本的访问请求伪装成Openvpn Server的请求（即把笔记本的访问源地址更改为Openvpn Swerver）的内网卡IP地址，本文为
		172.16.1.161，这样，从笔记本就可以轻松访问和Openvpn Server 相同的内部局域网的其它 Server(ip:127.16.1.13)了，因为经过NAT转换
		后，二者看起来是在同一个局域网网段内。在访问请求时，笔记本的IP以及被转换为Openvpn Server 的内网卡IP地址，本文为127.16.1.161
		，而和Openvpn Server 相同的内部局域网的所有Server的IP段都在172.16.1.0/24段，这样家里的笔记本也就相当于在172.16.1.0/24了，从
		而实现局域网互相访问的效果。
			当然，openvpn的功能及应用不仅仅是我上面描述的，在生产环境中，还可以有其他的使用方案，例如：配置VPN实现"翻墙"功能。在大
		家学习使用时，可以查阅相关文档，适当的扩展使用方法。文本的文档适合于个人客户端和企业或IDC机房内部LAN连接，也适合两个部同地域
		的企业或IDC机房LAN之间的互连。
			
◼ 1.3 openvpn 生产环境需求及环境模拟
	◾ 1.3.1 环境需求
			
			┌─────────────────────────────┬────────────────────────────────────────────────────────────────────┐
			│	设备/项目			 	  │		IP 												 		  	   │
			├─────────────────────────────┼────────────────────────────────────────────────────────────────────┤
			│ 	笔记本或PC(adsl 上网)	  │	10.0.0.0/24（办公室 DHCP）				 					 	   │
			├─────────────────────────────┼────────────────────────────────────────────────────────────────────┤
			│ 	Openvpn Server（双网卡）：│	eth0:10.0.0.28（外网）	 eth1:172.16.1.28（内网）			 	   │
			├─────────────────────────────┼────────────────────────────────────────────────────────────────────┤
			│	IDC 机房内部局域网服务器  │	172.16.1.0/24（IDC机房局域网服务器无外网IP，双希望ads1上网笔记本   │
			│							  │（即运维人员）， 不同网络内能够直接访问它。						   │
			├─────────────────────────────┼────────────────────────────────────────────────────────────────────┤
			│ 	APP Server				  │	eth0:172.16.1.17（内网）		 	  	   						   │
			├─────────────────────────────┼────────────────────────────────────────────────────────────────────┤
			│ 	实现需求				  │	在远端通过vpn客户端（笔记本）拨号到vpnserver，当然在笔记本电脑上可 │
			│							  │	以直接访问vpnserver所在局域网内的多个server，进行管理维护。		   │
			├─────────────────────────────┴────────────────────────────────────────────────────────────────────┤
			│																								   │
			│	环境：																						   │
			│	vpnserver:																					   │
			│	eth0:10.0.0.28	（外网IP）																	   │
			│		GW:10.0.0.254，dns:8.8.8.8																   │
			│	eth1:172.16.1.28（内网IP）																	   │
			│		GW:不配																					   │
			│	提示：检查是否可以ping通client eth0 ip。													   │
			│																								   │
			│																						   		   │
			│	client：																					   │
			│	eth0:172.16.1X																	   			   │
			│		GW:路由器。															   	   				   │
			│	提示：检查是否可以 ping 通 client eth1 ip。													   │
			└──────────────────────────────────────────────────────────────────────────────────────────────────┘ 
◾ 1.3.1 大规模集群环境 VPN 逻辑架构		
			
			
			
			
			
			
			
			
◾ 1.3.4 查看linux 系统环境
	c7.4:
		[root@localhost ~]# cat /etc/redhat-release ◀▬▬同lsb_release -d 
		CentOS Linux release 7.4.1708 (Core)
		[root@localhost ~]# uname -r
		3.10.0-693.el7.x86_64
		[root@localhost ~]# uname -m 是32位还是64位，x86_64 表示 64 位。
		x86_64
		提示：也可以用uname -a 和 lsb_release -a 查看更多信息。
			
◾ 1.3.5 配置 VPN 服务器时间同步
		手工执行如下命令
		[root@localhost ~]# /usr/sbin/ntpdate pool.ntp.org
		16 Aug 07:05:02 ntpdate[2886]: adjust time server 182.92.12.11 offset 0.001803 sec 
		加入到定时任务
		命令：
		[root@localhost ~]# echo '#time sync' >>/var/spool/cron/root
		[root@localhost ~]# echo '*/5 * * * * /usr/sbin/ntpdate pool.ntp.org > /dev/null 2>&1' >>/var/spool/cron/root crontab -l
		
		过程：
		[root@localhost ~]# echo '#time sync' >>/var/spool/cron/root 
		[root@localhost ~]# echo '*/5 * * * * /var/sbin/ntpdate pool.ntp.org >/dev/null 2>&1' >>/var/spool/cron/root
		[root@localhost ~]# crontab -l
		#time sync
		*/5 * * * * /var/sbin/ntpdate pool.ntp.org >/dev/null 2>&1
		提示：此步骤很重要，如果vpn服务器和拨号的计算机客户端不一致，可能会导致VPN连接失败。
		先服务段当前同步然后在配置到定时任务里不然定时任务一值不执行，时间一直不同步
◼ 1.4 openvpn 生产环境实战部署
		
◾ 1.4.1 建立Openvpn软件存放目录
			mkdir -p /home/oldboy/tools/openvpn
			cd /home/oldboy/tools/openvpn
			操作过程：
			[root@localhost ~]# mkdir /home/oldboy/tools/openvpn -p
			[root@localhost ~]# cd /home/oldboy/tools/openvpn/
			上传完毕后的 vpn 软件如下：
			[root@localhost ~]# ls -l
			total 1252 
			-rw-r--r--  1 root root 583045 Aug 13  2011 lzo-2.06.tar.gz
			-rw-r--r--  1 root root 911158 Jul  9  2014 openvpn-2.2.2.tar.gz
			提示：通过上传命令或者ftp传下vpn软件，然后也可以去网络上去wget下载
		
◾ 1.4.2 安装 lzo 压缩模块
			在安装openvpn软件前我们先来安装下lzo压缩模块。
			操作命令：
			[root@localhost openvpn]# wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz
			[root@localhost openvpn]# tar zxf lzo-2.06.tar.gz
			[root@localhost openvpn]# cd lzo-2.06
			[root@localhost openvpn]# ./configure
			[root@localhost openvpn]# make
			[root@localhost openvpn]# make install
			[root@localhost openvpn]# cd ../
			下载地址：http://www.oberhumer.com/opensource/lzo/download/
			寻找软件方法：浏览器打开谷歌搜索，http://www.google.com.tw 然后关键字：download 软件报名，如：download lzo-2.0.6.tar.gz
		
			提示:确保每一步的最后结果步能有错误
			
		
		
		
◾ 1.4.3 安装 openvpn 软件 
			操作命令：
			#wget http://www.openvpn.net/release/openvpn-2.2.2.tar.gz
			tar zxf openvpn-2.2.2.tar.gz
			cd openvpn-2.2.2
			./configure --with-lzo-headers=/usr/local/include --with-lzo-lib=/usr/local/lib 
			make 
			make install
			cd ../
			操作过程：
			[root@localhost openvpn]# tar zxf openvpn-2.2.2.tar.gz
			[root@localhost openvpn]# cd openvpn-2.2.2
			[root@localhost openvpn-2.2.2]# ./configure --with-lzo-headers=/usr/local/include --with-lzo-lib=/usr/local/lib
			[root@localhost openvpn-2.2.2]# make 
			[root@localhost openvpn-2.2.2]# make install
			[root@localhost openvpn-2.2.2]# cd ..
			提示：configure:error:OpenSSL Crypto headers not found.
			解答：前面讲过openvpn通信原理需要SSL支持。
			[root@bogon openvpn-2.2.2]# rpm -qa|grep openssl
			openssl-1.0.2k-8.el7.x86_64
			openssl-libs-1.0.2k-8.el7.x86_64
			xmlsec1-openssl-1.2.20-5.el7.x86_64
			[root@localhost openvpn]# yum install openssl* -y
			略。。。。
			
			注意：可执行文件安装路径：/usr/local/sbin/openvpn 
			[root@localhost openvpn]# which openvpn
			/usr/local/sbin/openvpn					#表示装好了

			[root@localhost openvpn]# ll /usr/local/sbin/openvpn 
			-rwxr-xr-x 1 root root 2863520 Aug 17 00:39 /usr/local/sbin/openvpn  #也表示安装成功
						
◾ 1.4.4 配置 openvpn server-建立 CA(Certificate Authority)证书
		初始化配置命令：
		cd /root/tools/openvpn/
		cd /root/test/openvpn-2.2.2/easy-rsa/2.0
		cp vars vars.roye.20180817			#备份 vars
		vim vars #◀▬（shift+g 到结尾删除结尾最后5行，如下：）
		export KEY_COUNTRY="US"
		export KEY_PROVINCE="CA"
		export KEY_CITY="SanFrancisco"
		export KEY_ORG="Fort-Funston"
		export KEY_EMAIL="me@myhost.mydomain"
		
		增加如下内容：
		#by roye 20080214
		export KEY_COUNTRY="CN"
		export KEY_PROVINCE="BJ"
		export KEY_CITY="Beijing"
		export KEY_ORG="roye"
		export KEY_EMAIL="154256500@qq.com"
		
	提示：
		#定义你所在的国家，2个字符
		export KEY_COUNTRY=CN
		
		#你所在的省份
		export KEY_CITY=Beijing
		
		#你所在的组织
		export KEY_ORG="roye"
		
		#你的邮件地址
		export KEY_EMAIL=154256500@qq.com 
		
	如果是openvpn-2.2.2.tar.gz则黄色为版本步同的地方：

		[root@localhost ~]#tail -16 vars 
		#These are default values for fields
		#which will be placed in the certificate.
		#Don't leave any of these fields blank.
		#by roye 20180817

		export KEY_COUNTRY="CN"
		export KEY_PROVINCE="BJ"
		export KEY_CITY="Beijing"
		export KEY_ORG="oldboy"
		export KEY_EMAIL="154256500@qq.com"
		export KEY_EMAIL=154256500@qq.com
		export KEY_CN="CN"
		export KEY_NAME="oldboy"
		export KEY_OU="oldboy"
		export PKCS11_MODULE_PATH="changeme"
		export PKCS11_PIN=1234

		
		
		+-------------------------------------------------------------------------------------------------------------
		|此部分可以忽略
        |
        |
		|	快速全命令行操作（不用vim）
		|	[root@localhost openvpn]# cd openvpn-2.2.2/easy-rsa/2.0/
		|	[root@localhost 2.0]# cp vars vars.oldboy.20180714
		|	[root@localhost 2.0]# tail -6 vars	
		|	# Don't leave any of these fields blank.
		|	export KEY_COUNTRY="US"
		|	export KEY_PROVINCE="CA"
		|	export KEY_CITY="SanFrancisco"
		|	export KEY_ORG="Fort-Funston"
		|	export KEY_EMAIL="me@myhost.mydomain"
		|	
		|	删除结尾最后 5 行，即上面 tail 命令后显示的行。
		|	[root@localhost 2.0]# sed -i '$d' vars
		|	[root@localhost 2.0]# sed -i '$d' vars
		|	[root@localhost 2.0]# sed -i '$d' vars
		|	[root@localhost 2.0]# sed -i '$d' vars
		|	[root@localhost 2.0]# sed -i '$d' vars
		|	[root@localhost 2.0]# tail -1 vars
		|	
		|	#Don't leave any of these fields blank.
		|	提示：删除方法还有复杂方法如：sed -e :a -e '$d;N;2,3ba' -e 'P;D' oldboy.log 加粗部分位要删除最后行的数字，步推荐用这个。
		|	
		|	添加下面需要的内容
		|	cat >>vars <<EOF
		|	#by oldboy 20180814
		|	export KEY_COUNTRY="CN"
		|	export KEY_PROVINCE="BJ"
		|	export KEY_CITY="Beijing"
		|	export KEY_ORG="oldboy"
		|	export KEY_EMAIL="154256500@qq.com"
		|	EOF 
		|	
		|	[root@localhost 2.0]# tail -7 vars 
		|	#Don't leave any of these fields blank.
		|	#by oldboy 20180817
		|	
		|	export KEY_COUNTRY="CN"
		|	export KEY_PROVINCE="BJ"
		|	export KEY_CITY="Beijing"
		|	export KEY_ORG="oldboy"
		|	export KEY_EMAIL="154256500@qq.com"
		|	
		+-------------------------------------------------------------------------------------------------------------
		
		
		提示：在下文建立证书时，会提示上面配置的内容，这是直接回车就好了，步需要敲字符了。
		开始初始化 PKI (public key infrastruction using certificates and private keys)
		
		修改完vars文件后，执行 source vars 使前面对vars 的修改生效：
		[root@localhost 2.0]# source vars
		NOTE: If you run ./clean-all, I will be doing a rm -rf on /root/test/openvpn-2.2.2/easy-rsa/2.0/keys
		
		然后根据提示执行
		
		./clean-all  #<--清除所有证书相关
		./build-ca   #<--生成 CA 证书
		提示：The final command (build-cn) whill build the certificate authority (CA) certificate and key by invoking the interactive openssl command;
		
		操作过程：
		[root@localhost 2.0]# ./clean-all  <--清楚所有证书
		[root@localhost 2.0]# ./build-ca   <--创建新的ca 证书 ，ca,ort,ca,key。注意，下面是输出。
		Generating a 1024 bit RSA private key
		.......++++++
		...++++++
		writing new private key to 'ca.key'
		-----
		You are about to be asked to enter information that will be incorporated
		into your certificate request.
		What you are about to enter is what is called a Distinguished Name or a DN.
		There are quite a few fields but you can leave some blank
		For some fields there will be a default value,
		If you enter '.', the field will be left blank.
		-----
		Country Name (2 letter code) [CN]:			#刚才在配置文件里的默认值
		State or Province Name (full name) [BJ]:	#刚才在配置文件里的默认值
		Locality Name (eg, city) [Beijing]:			#刚才在配置文件里的默认值
		Organization Name (eg, company) [oldboy]:			#刚才在配置文件里的默认值
		Organizational Unit Name (eg, section) [oldboy]:	#刚才在配置文件里的默认值
		Common Name (eg, your name or your server's hostname) [CN]:oldboy  #应输入 VPN 服务器FQDN
		Name [oldboy]:								#刚才在配置文件里的默认值
		Email Address [154256500@qq.com]:			#刚才在配置文件里的默认值
		
		提示：Note that in the above sequence,most queried parameters were defaulted to the values set in the vars or vars.
		bat files. The only parameter which must be explicitly entered is the Common Name.In the example above,I used "oldboy".
		官方的提示：Common Name 必须要填写。
		build-ca 后生成的ca证书:
		
		[root@bogon 2.0]# ll keys/					#操作完之后生成以下文件 CS证书
		total 12
		-rw-r--r-- 1 root root 1314 Aug 17 10:41 ca.crt  <--CERTIFICATE
		-rw------- 1 root root  916 Aug 17 10:41 ca.key  <--RSA PRIVATE KEY
		-rw-r--r-- 1 root root    0 Aug 17 10:37 index.txt
		-rw-r--r-- 1 root root    3 Aug 17 10:37 serial
		 
		 以下是 2.2.2版本的结果：
		 [root@localhost ~]# source vars
		 NOTE:If you run ./clean-all, I will be doing a rm -rf on 
		 /root/tools/openvpn/openvpn-2.2.2/easy-rsa/2.0/keys 
		 [root@localhost 2.0]# ./clean-all
		 [root@localhost 2.0]# ./build-ca
		 Generating a 1024 bit RSA private key 
		 ..................+++++++++++
		 ............................++++++++++
		 writing new private key to 'ca.key'
		 ------
		 you are about to be asked to enter information that will be incorporated 
		 into your certificate request.
		 What you are about to enter is what is called a Distinguisbed Name or a DN.
		 There are quite a few fields but you can leave some blank
		 For some fields there will be a default value.
		 If you enter ',', the field will be left blank.
		 ----
		 Country Name (2 letter code) [CN]:
		 State or Province Name (full name)[BJ]:
		 Locality Name (eg,city)[Beijing]:
		 Organization  Name (eg,company)[oldboy]:
		 Organizational Unit Name (eg,section)[oldboy]:
		 Common Name (eg,your name or your server's hostname)[CN]:oldboy
		 Name [oldboy]:
		 Email Address [154256500@qq.com]:
		 [root@localhost 2.0]# ll keys/
		 total 12
		-rw-r--r-- 1 root root 1314 Aug 17 10:41 ca.crt  <--CERTIFICATE
		-rw------- 1 root root  916 Aug 17 10:41 ca.key  <--RSA PRIVATE KEY
		-rw-r--r-- 1 root root    0 Aug 17 10:37 index.txt
		-rw-r--r-- 1 root root    3 Aug 17 10:37 serial
		 
◾ 1.4.5 生成服务器端证书和密钥key 文件 
		./build-key-server server 
			与上一步类似，其中"Common Name " 项需要填写 VPN 服务器 FQDN,其他均可默认为default值。还会出现："Sign the certificate?[y/n]" 和 "1 out of 1 certificate requests
			certified,commit?[y/n]",都输入y然后回车，其它可参照如下。
			以下是2.2.2版本的结果 ：
			操作过程：
			[root@localhost 2.0]# ./build-key-server server
			Generating a 1024 bit RSA private key
			...........++++++
			....................................................................++++++
			writing new private key to 'server.key'
			-----
			You are about to be asked to enter information that will be incorporated
			into your certificate request.
			What you are about to enter is what is called a Distinguished Name or a DN.
			There are quite a few fields but you can leave some blank
			For some fields there will be a default value,
			If you enter '.', the field will be left blank.
			-----
			Country Name (2 letter code) [CN]:
			State or Province Name (full name) [BJ]:
			Locality Name (eg, city) [Beijing]:
			Organization Name (eg, company) [oldboy]:
			Organizational Unit Name (eg, section) [oldboy]:
			Common Name (eg, your name or your server's hostname) [server]:
			Name [oldboy]:
			Email Address [154256500@qq.com]:
			
			Please enter the following 'extra' attributes
			to be sent with your certificate request
			A challenge password []:123456				#密码
			An optional company name []:oldboy			#公司名
			Using configuration from /root/test/openvpn-2.2.2/easy-rsa/2.0/openssl-1.0.0.cnf
			Check that the request matches the signature
			Signature ok
			The Subject's Distinguished Name is as follows
			countryName           :PRINTABLE:'CN'
			stateOrProvinceName   :PRINTABLE:'BJ'
			localityName          :PRINTABLE:'Beijing'
			organizationName      :PRINTABLE:'oldboy'
			organizationalUnitName:PRINTABLE:'oldboy'
			commonName            :PRINTABLE:'server'
			name                  :PRINTABLE:'oldboy'
			emailAddress          :IA5STRING:'154256500@qq.com'
			Certificate is to be certified until Aug 14 03:21:53 2028 GMT (3650 days)
			Sign the certificate? [y/n]:y
			
			
			1 out of 1 certificate requests certified, commit? [y/n]y
			Write out database with 1 new entries
			Data Base Updated
			
			提示：
				As in the previous step,most parameters can bedefaulted.When the Common Name is queried,enter "server".Two other
			queries require positive responses,"Sign the certificate? [y/n]" and "1 out of 1 certificate requests certified,commit?[y/n]".
			
			查看创建的服务端证书：


			[root@bogon 2.0]# ll -lrt keys/
			total 40
			-rw-r--r-- 1 root root    3 Aug 17 10:37 serial.old
			-rw-r--r-- 1 root root    0 Aug 17 10:37 index.txt.old
			-rw------- 1 root root  916 Aug 17 10:41 ca.key
			-rw-r--r-- 1 root root 1314 Aug 17 10:41 ca.crt
			-rw------- 1 root root  916 Aug 17 11:21 server.key #服务端生成的证书
			-rw-r--r-- 1 root root  769 Aug 17 11:21 server.csr #服务端生成的证书
			-rw-r--r-- 1 root root    3 Aug 17 11:22 serial 	#服务端生成的证书
			-rw-r--r-- 1 root root   21 Aug 17 11:22 index.txt.attr #服务端生成的证书
			-rw-r--r-- 1 root root  121 Aug 17 11:22 index.txt  #服务端生成的证书
			-rw-r--r-- 1 root root 4002 Aug 17 11:22 server.crt #服务端生成的证书
			-rw-r--r-- 1 root root 4002 Aug 17 11:22 01.pem	    #服务端生成的证书

			以下是2.2.2版本的结果 ：

◾ 1.4.6 生成客户端证书和key文件		

		生成 client 证书和key 文件。若建立多个客户证书，则重复如下步骤即可。只需修改Common Name 项 oldboy 的名称。
		在openvpn中，这种配置方法是每一个登陆的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接（
	如果有两个集群安装相同证书，同时拨服务器，都能拨上，但是只有第一个拨上的才能连通网络）。所以，如果有多个人，每
	个人需要建立一 份证书（建立一份证书多人使用的情况在后文中会讲到）。
	
	下面建立 2 份客户端证书，名称分别为 client 和 ett，操作过程如下：
	

		[root@bogon 2.0]# ./build-key test   #在工作当中这个就是每个人的名字
		Generating a 1024 bit RSA private key
		...............................................................++++++
		...++++++
		writing new private key to 'test.key'
		-----
		You are about to be asked to enter information that will be incorporated
		into your certificate request.
		What you are about to enter is what is called a Distinguished Name or a DN.
		There are quite a few fields but you can leave some blank
		For some fields there will be a default value,
		If you enter '.', the field will be left blank.
		-----
		Country Name (2 letter code) [CN]:（回车）
		State or Province Name (full name) [BJ]:（回车）
		Locality Name (eg, city) [Beijing]:（回车）
		Organization Name (eg, company) [oldboy]:（回车）
		Organizational Unit Name (eg, section) [oldboy]:（回车）
		Common Name (eg, your name or your server's hostname) [test]:（回车）
		Name [oldboy]:（回车）
		Email Address [154256500@qq.com]:（回车）
		
		Please enter the following 'extra' attributes
		to be sent with your certificate request
		A challenge password []:123456			#密码
		An optional company name []:oldboy		#公司名称
		Using configuration from /root/test/openvpn-2.2.2/easy-rsa/2.0/openssl-1.0.0.cnf
		Check that the request matches the signature
		Signature ok
		The Subject's Distinguished Name is as follows
		countryName           :PRINTABLE:'CN'
		stateOrProvinceName   :PRINTABLE:'BJ'
		localityName          :PRINTABLE:'Beijing'
		organizationName      :PRINTABLE:'oldboy'
		organizationalUnitName:PRINTABLE:'oldboy'
		commonName            :PRINTABLE:'test'
		name                  :PRINTABLE:'oldboy'
		emailAddress          :IA5STRING:'154256500@qq.com'
		Certificate is to be certified until Aug 14 04:05:09 2028 GMT (3650 days)
		Sign the certificate? [y/n]:y	#确认
		
		
		1 out of 1 certificate requests certified, commit? [y/n]y #确认
		Write out database with 1 new entries
		Data Base Updated
		
		
		[root@bogon 2.0]# ll keys/
		total 64
		-rw-r--r-- 1 root root 4002 Aug 17 11:22 01.pem
		-rw-r--r-- 1 root root 3878 Aug 17 12:05 02.pem
		-rw-r--r-- 1 root root 1314 Aug 17 10:41 ca.crt
		-rw------- 1 root root  916 Aug 17 10:41 ca.key
		-rw-r--r-- 1 root root  240 Aug 17 12:05 index.txt
		-rw-r--r-- 1 root root   21 Aug 17 12:05 index.txt.attr
		-rw-r--r-- 1 root root   21 Aug 17 11:22 index.txt.attr.old
		-rw-r--r-- 1 root root  121 Aug 17 11:22 index.txt.old
		-rw-r--r-- 1 root root    3 Aug 17 12:05 serial
		-rw-r--r-- 1 root root    3 Aug 17 11:22 serial.old
		-rw-r--r-- 1 root root 4002 Aug 17 11:22 server.crt
		-rw-r--r-- 1 root root  769 Aug 17 11:21 server.csr
		-rw------- 1 root root  916 Aug 17 11:21 server.key
		-rw-r--r-- 1 root root 3878 Aug 17 12:05 test.crt	#生成的客户端证书和密钥	
		-rw-r--r-- 1 root root  769 Aug 17 12:05 test.csr	#生成的客户端证书和密钥	
		-rw------- 1 root root  916 Aug 17 12:05 test.key	#生成的客户端证书和密钥		
		
		
		依次类推生成其他客户端证书./key;不同的是本例使用 build-key-pass 命令 build-key 的区别见下面的官方说明：
		（If you would like to password-protect your client keys,substitute the build-key-passcript.）
	如果你需要用密码保护你的客户端你可以用 build-key-passscript.替代。
				
		
		[root@bogon 2.0]# ./build-key-pass ett
		Generating a 1024 bit RSA private key
		.++++++
		...............++++++
		writing new private key to 'ett.key'		
		Enter PEM pass phrase:					#拨号密码，这个是看不见的
		Verifying - Enter PEM pass phrase:		#重复拨号密码
		-----
		You are about to be asked to enter information that will be incorporated
		into your certificate request.
		What you are about to enter is what is called a Distinguished Name or a DN.
		There are quite a few fields but you can leave some blank
		For some fields there will be a default value,
		If you enter '.', the field will be left blank.
		-----
		Country Name (2 letter code) [CN]:
		State or Province Name (full name) [BJ]:
		Locality Name (eg, city) [Beijing]:
		Organization Name (eg, company) [oldboy]:
		Organizational Unit Name (eg, section) [oldboy]:
		Common Name (eg, your name or your server's hostname) [ett]:
		Name [oldboy]:
		Email Address [154256500@qq.com]:
		
		Please enter the following 'extra' attributes
		to be sent with your certificate request
		A challenge password []:123456		#这个在发送证书请求时会额外需要
		An optional company name []:oldboy
		Using configuration from /root/test/openvpn-2.2.2/easy-rsa/2.0/openssl-1.0.0.cnf
		Check that the request matches the signature
		Signature ok
		The Subject's Distinguished Name is as follows
		countryName           :PRINTABLE:'CN'
		stateOrProvinceName   :PRINTABLE:'BJ'
		localityName          :PRINTABLE:'Beijing'
		organizationName      :PRINTABLE:'oldboy'
		organizationalUnitName:PRINTABLE:'oldboy'
		commonName            :PRINTABLE:'ett'
		name                  :PRINTABLE:'oldboy'
		emailAddress          :IA5STRING:'154256500@qq.com'
		Certificate is to be certified until Aug 14 04:21:22 2028 GMT (3650 days)
		Sign the certificate? [y/n]:y
		
		
		1 out of 1 certificate requests certified, commit? [y/n]y
		Write out database with 1 new entries
		Data Base Updated		
			
		[root@bogon 2.0]# ll keys/
		total 80
		-rw-r--r-- 1 root root 4002 Aug 17 11:22 01.pem
		-rw-r--r-- 1 root root 3878 Aug 17 12:05 02.pem
		-rw-r--r-- 1 root root 3877 Aug 17 12:21 03.pem
		-rw-r--r-- 1 root root 1314 Aug 17 10:41 ca.crt
		-rw------- 1 root root  916 Aug 17 10:41 ca.key
		-rw-r--r-- 1 root root 3877 Aug 17 12:21 ett.crt	#生成的客户端证书和密钥	
		-rw-r--r-- 1 root root  765 Aug 17 12:21 ett.csr	#生成的客户端证书和密钥	
		-rw------- 1 root root 1041 Aug 17 12:21 ett.key	#生成的客户端证书和密钥	
		-rw-r--r-- 1 root root  358 Aug 17 12:21 index.txt
		-rw-r--r-- 1 root root   21 Aug 17 12:21 index.txt.attr
		-rw-r--r-- 1 root root   21 Aug 17 12:05 index.txt.attr.old
		-rw-r--r-- 1 root root  240 Aug 17 12:05 index.txt.old
		-rw-r--r-- 1 root root    3 Aug 17 12:21 serial
		-rw-r--r-- 1 root root    3 Aug 17 12:05 serial.old
		-rw-r--r-- 1 root root 4002 Aug 17 11:22 server.crt
		-rw-r--r-- 1 root root  769 Aug 17 11:21 server.csr
		-rw------- 1 root root  916 Aug 17 11:21 server.key
		-rw-r--r-- 1 root root 3878 Aug 17 12:05 test.crt
		-rw-r--r-- 1 root root  769 Aug 17 12:05 test.csr
		-rw------- 1 root root  916 Aug 17 12:05 test.key
		
		#如果公司有100人就需要这样执行100次，但也可以写脚本	
		
◾ 1.4.7	生成 generate diffie hellman parameters
		提示：Diffie Hellman parameters must be generated for the OpenVPN server.
		生成传输进行密钥交换时用到的交换密钥协议文件
		
		./build-dh <--(不能落了不执行啊，否则出错)
		
		以下是2.2.2版本的结果 ：
		操作过程：
		[root@bogon 2.0]# ./build-dh
		Generating DH parameters, 1024 bit long safe prime, generator 2
		This is going to take a long time
		
		[root@bogon 2.0]# ll keys/dh1024.pem 		#这个步骤生成的是 dh1024.pem  文件
		-rw-r--r-- 1 root root 245 Aug 17 12:34 keys/dh1024.pem
		
◾ 1.4.8	查看生成服务器及客户单的证书文件
		以下是2.2.2版本的结果 ：
		生成的证书目录及文件如下：
		[root@localhost 2.0]# pwd  
		/root/tools/openvpn/openvpn-2.2.2/easy-rsa/2.0  <--这步没结果是不对的。
		[root@bogon 2.0]# ll keys/
		total 84
		-rw-r--r-- 1 root root 4002 Aug 17 11:22 01.pem
		-rw-r--r-- 1 root root 3878 Aug 17 12:05 02.pem
		-rw-r--r-- 1 root root 3877 Aug 17 12:21 03.pem
		-rw-r--r-- 1 root root 1314 Aug 17 10:41 ca.crt
		-rw------- 1 root root  916 Aug 17 10:41 ca.key
		-rw-r--r-- 1 root root  245 Aug 17 12:34 dh1024.pem
		-rw-r--r-- 1 root root 3877 Aug 17 12:21 ett.crt
		-rw-r--r-- 1 root root  765 Aug 17 12:21 ett.csr
		-rw------- 1 root root 1041 Aug 17 12:21 ett.key
		-rw-r--r-- 1 root root  358 Aug 17 12:21 index.txt
		-rw-r--r-- 1 root root   21 Aug 17 12:21 index.txt.attr
		-rw-r--r-- 1 root root   21 Aug 17 12:05 index.txt.attr.old
		-rw-r--r-- 1 root root  240 Aug 17 12:05 index.txt.old
		-rw-r--r-- 1 root root    3 Aug 17 12:21 serial
		-rw-r--r-- 1 root root    3 Aug 17 12:05 serial.old
		-rw-r--r-- 1 root root 4002 Aug 17 11:22 server.crt
		-rw-r--r-- 1 root root  769 Aug 17 11:21 server.csr
		-rw------- 1 root root  916 Aug 17 11:21 server.key
		-rw-r--r-- 1 root root 3878 Aug 17 12:05 test.crt
		-rw-r--r-- 1 root root  769 Aug 17 12:05 test.csr
		-rw------- 1 root root  916 Aug 17 12:05 test.key

◾ 1.4.9	详解服务器及客户端的证书各文件用途
		

			┌─────────────────────┬───────────────────────────┬───────────────────────────┬──────────┐
			│	Filename 		  │			Needed By		  │		  Purpose		 	  │  Secret	 │
			├─────────────────────┼───────────────────────────┼───────────────────────────┼──────────┤
			| 	ca.crt			  |	server + all clients	  |	Root CA certificate  	  |    NO	 | #ca证书服务端和所有的客户端都需要
			├---------------------┼---------------------------┼---------------------------┼----------┤
			| 	ca.key 			  |	key signing machine only  |	Root CA key 		 	  |    YES   | #服务端需要的
			├---------------------┼---------------------------┼---------------------------┼----------┤
			| 	dh{n}.pem 		  |	server only	  			  |	Diffie Hellman parameters |    YES   |  #协议文件，加密算法
			├---------------------┼---------------------------┼---------------------------┼----------┤
			|	server.crt 		  | server.only		  		  |	Server Certificate 		  |    NO    | #服务端的证书和key 
			├---------------------┼---------------------------┼---------------------------┼----------┤
			|	server.key 		  | server.only		  		  |	Server Key	  			  |    YES   | #服务端的证书和key 
			├---------------------┼---------------------------┼---------------------------┼----------┤
			|	test.crt 	  	  | client1 only	  		  |	Client1 Certificate 	  |    NO    | #客户端证书
			├---------------------┼---------------------------┼---------------------------┼----------┤
			|	test.key 	  	  | client1 only	  		  |	Client1 Key		  	  	  |    YES   | #客户端key
			├---------------------┼---------------------------┼---------------------------┼----------┤
			|	ett.crt 	  	  | ett only	  		 	  |	ett Certificate	  	  	  |    NO    | #客户端证书
			├---------------------┼---------------------------┼---------------------------┼----------┤
			|	ett.key 	  	  | ett only	  		  	  |	ett Key		  	  	  	  |    YES   | #客户端key
			└---------------------┴---------------------------┴---------------------------┴----------┘ 
		
		为防止恶意攻击（如DOS、UDP port flooding），我们生成"HMAC firewall"（但是效果不太好说）
			[root@localhost 2.0]# openvpn --genkey --secret keys/ta.key
			[root@localhost 2.0]# ls -l keys/ta.key
			-rw------- 1 root root 636 Aug 17 13:58 keys/ta.key
			提示：2048 bit OpenVPN static key 
			
			生成证书吊销文件，防止日后有人丢失证书，被非法用户接入VPN
			#./make-orl vpnorl.pem(暂无)
			大部分服务端工作已完成，接下来的操作就是把证书拷贝到指定地点了。
			
◾ 1.4.10  详解服务器端 VPN 重要的命令	
			vars 脚本是用来创建环境变量，设置所需要的变量的脚本
			clean-all 脚本是创建生成 ca 证书及密钥文件所需要的文件及目录
			build-ca  脚本生成ca证书（交互）
			build-dh  脚本生成Diffie-Hellman 文件（交互）
			build-key-server 脚本生成服务器端密钥（交互）
			build-key 脚本生成客户端密钥（交互）
			build-key-pass 脚本生成客户端带密码的密钥（交互）
			build-dh 脚本生成Diffie-Hellman 文件（交互）
			pkitool 脚本直接使用 vars 的环境变量设置，直接生成证书（非交互）
			[root@localhost 2.0]# ll
			total 136
			-rwxrwxr-x 1  500  500   119 Nov 25  2011 build-ca
			-rwxrwxr-x 1  500  500   352 Nov 25  2011 build-dh
			-rwxrwxr-x 1  500  500   188 Nov 25  2011 build-inter
			-rwxrwxr-x 1  500  500   163 Nov 25  2011 build-key
			-rwxrwxr-x 1  500  500   157 Nov 25  2011 build-key-pass
			-rwxrwxr-x 1  500  500   249 Nov 25  2011 build-key-pkcs12
			-rwxrwxr-x 1  500  500   268 Nov 25  2011 build-key-server
			-rwxrwxr-x 1  500  500   213 Nov 25  2011 build-req
			-rwxrwxr-x 1  500  500   158 Nov 25  2011 build-req-pass
			-rwxrwxr-x 1  500  500   428 Nov 25  2011 clean-all
			-rwxrwxr-x 1  500  500  1457 Nov 25  2011 inherit-inter
			drwx------ 2 root root  4096 Aug 17 13:58 keys
			-rwxrwxr-x 1  500  500   295 Nov 25  2011 list-crl
			-rw-rw-r-- 1  500  500   413 Nov 25  2011 Makefile
			-rwxrwxr-x 1  500  500  7768 Oct 21  2010 openssl-0.9.6.cnf
			-rwxrwxr-x 1  500  500  8325 Nov 25  2011 openssl-0.9.8.cnf
			-rwxrwxr-x 1  500  500  8222 Nov 25  2011 openssl-1.0.0.cnf
			-rwxrwxr-x 1  500  500 12675 Nov 25  2011 pkitool
			-rw-rw-r-- 1  500  500  9299 Nov 25  2011 README
			-rwxrwxr-x 1  500  500   918 Nov 25  2011 revoke-full
			-rwxrwxr-x 1  500  500   178 Nov 25  2011 sign-req
			-rwxrwxr-x 1  500  500  1828 Aug 17 10:07 vars
			-rwxr-xr-x 1 root root  1841 Aug 17 09:34 vars.roye.20180817
			-rwxrwxr-x 1  500  500   714 Nov 25  2011 whichopensslcnf

◾ 1.4.10  详解服务器端 VPN server.conf 重要参数
			1）拷贝 keys 及配置 
			把所有的keys 和配置拷贝到/etc/openvpn 目录下：
			操作命令：
			mkdir -p /etc/openvpn 
			cd /root/tools/openvpn 
			cd openvpn-2.2.2/easy-rsa/2.0
			cp -ap keys /etc/openvpn/
			cd /root/tools/openvpn/openvpn-2.2.2/sample-config-files/
			cp client.conf server.conf  /etc/openvpn/
			tree /etc/openvpn/
			
			操作过程：
			[root@localhost 2.0]# mkdir -p /etc/openvpn #<--默认不存在此目录（此目录是将来存放配置文件和证书的地方）
			[root@localhost 2.0]# cd /root/tools/openvpn/
			[root@localhost 2.0]# cd openvpn-2.2.2/easy-rsa/2.0/  #记下当前的路径
			[root@localhost 2.0]# cp -ap keys /etc/openvpn/
			[root@localhost 2.0]# cd /root/tools/openvpn/openvpn-2.2.2/sample-config-files/
			[root@localhost sample-config-files]# cp client.conf server.conf  /etc/openvpn/
			[root@bogon sample-config-files]# tree /etc/openvpn/
			/etc/openvpn/
			├── client.conf
			├── keys
			│   ├── 01.pem
			│   ├── 02.pem
			│   ├── 03.pem
			│   ├── ca.crt
			│   ├── ca.key
			│   ├── dh1024.pem
			│   ├── ett.crt
			│   ├── ett.csr
			│   ├── ett.key
			│   ├── index.txt
			│   ├── index.txt.attr
			│   ├── index.txt.attr.old
			│   ├── index.txt.old
			│   ├── serial
			│   ├── serial.old
			│   ├── server.crt
			│   ├── server.csr
			│   ├── server.key
			│   ├── ta.key
			│   ├── test.crt
			│   ├── test.csr
			│   └── test.key
			└── server.conf
			
			1 directory, 24 files
			
			[root@localhost sample-config-files]# cd /etc/openvpn/
			
			2）server.conf 样例默认开启的配置如下：
			操作命令： 
			[root@bogon openvpn]# cp server.conf server.conf.ori #备份原始文件
			[root@bogon openvpn]#    #过滤 掉 ;和#还有 ^$空格 在server.conf文件中
			port 1194
			proto udp
			dev tun
			ca ca.crt
			cert server.crt
			dh dh1024.pem
			server 10.8.0.0 255.255.255.0
			ifconfig-pool-persist ipp.txt
			keepalive 10 120
			comp-lzo
			persist-key
			persist-tun
			status openvpn-status.log
			verb 3
			
			提示 ：openvpn-2.2.2的版本和2.0.9的server.conf 几乎一样
			注意 ：
			a、生产环境配置 server.conf 配置见本文档下面的conf目录单独配置文件，或看下文
			b、重视默认的样例其他配置参数。
			3）企业生产环境server.conf 配置案例：
			┌───────────────────────────────┬───────────────────────────────────────────────────────-──────────┐
			│		配置参数	  			│			 	参数说明							 	  		   │
			├───────────────────────────────┼───────────────────────────────────────────────────────-──────────┤
			| local 124.43.12.115  			| 哪一个本地地址要被 OpenVPN 进行监听（Which local IP address	   |#是VPN启动时监听的IP地址，这地方要配的是服务器端的外网地址
			|					  			| should OpenVPN） 	| 10.0.0.28：1194						   	   |
			├-------------------------------┼------------------------------------------------------------------┤
			| port 52115 		  			| 监听的端口，默认是1194，这里为了安全起见，修改为52115		   	   |
			├-------------------------------┼------------------------------------------------------------------┤
			| proto udp	（默认是udp协议）	| 指定监听的协议，当并发访问多时，推荐 tcp   					   |
			├-------------------------------┼------------------------------------------------------------------┤
			| dev tun  	（选tun即可）	 	| vpn server 的模式采用路由模式。可选tap或tun					   |
			├-------------------------------┼------------------------------------------------------------------┤
			| ca ca.crt			  			| ca 证书，注意此文件和 server.conf 在目录下，否则要用绝对路径调用 | #服务端和客户端都需要
			├-------------------------------┼------------------------------------------------------------------┤
			| cert server.crt 	  			| 服务端的证书和文件    										   |
			├-------------------------------┼------------------------------------------------------------------┤
			| key server.key 	  			| This file should be kept secret 	 						   	   | #服务端的证书和文件
			├-------------------------------┼------------------------------------------------------------------┤
			| dh dh1024.pem	  	  			| 密钥交换文件    												   |
			├-------------------------------┼------------------------------------------------------------------┤
			| server 10.8.0.0 255.255.255.0	| 这个是VPN SERVER 动态分配给 VPN CLIENT 的地址池，一般不需要更改  | #是客户端拨号之后，服务器端按照这个地址池给客户端分配地址
			|								| 这个段不要和任何网络地址段冲突或重复							   |
			├-------------------------------┼------------------------------------------------------------------┤
			| ifconfig-pool-persist ipp.txt |   															   |
			├-------------------------------┼------------------------------------------------------------------┤
			| push "route 10.0.0.0			|  这是 VPN SERVER 所在的内网网段，如果有多个可以写多个push,注意， | #在VPN的客户端上面配一个路由 push 表示推到客户端
			|    255.255.255.0"				|  此命令实际作用是在 vpn 客户端本地生成 VPN SERVER 所在的内网网段 | #从实际的配置上面这个route路由就是你vpn server 所在内网的网段
			|								|  路由，确保能够和 VPN 										   |
			├-------------------------------┼------------------------------------------------------------------┤
			| 								|  VPN SERVER 所在的内网网段路由，确保能够和 VPN SERVER 所在的内网 |
			|								|  网段通信。路由条目类似：10.0.0.0 255.255.255.0 10.8.0.9 	       |
			|								|  10.8.0.10	1 												   |
			|								|	经验：如果想知道VPN 到底在本地加了那些路由，可以在拨号前笔记本 |
			|								|	上命令行执行 route print 记录下所有路由条目，然后在拨号后记录下|
			|								|  所有路由条目，然后，用比较软件比较下即可知道变量在哪里了		   |
			├-------------------------------┼------------------------------------------------------------------┤
			| client-to-client 			    |  允许拨号的多个 VPN client 互相通信 							   | #多个客户端拨到同一个服务器上它们之间是否允许通信
			├-------------------------------┼------------------------------------------------------------------┤
			| duplicate-cn 				    |  允许多个客户端使用同一个账户连接								   | #允许多个客户端使用一个证书和密钥文件
			├-------------------------------┼------------------------------------------------------------------┤
			| keepalive 10 120 				|  每10秒ping 一次，若是120秒未收到包，即认定客户端断线			   |
			├-------------------------------┼------------------------------------------------------------------┤
			| comp-lzo 					    |  开启压缩功能													   |
			├-------------------------------┼------------------------------------------------------------------┤
			| persist-key				    |  当vpn超时后，当重新启动vpn后，保持上一次使用的私钥，而不重新读取|
			|								|  私钥。														   |
			├-------------------------------┼------------------------------------------------------------------┤
			| persist-tun				    |  通过 keepalive 检测 vpn 超时后，当重新启动 vpn 后，保持tun 或者 |
			|								|  tap 设备自动连接状态											   |
			├-------------------------------┼------------------------------------------------------------------┤
			| status openvpn-status.log 	|  openvpn 日志状态信息								   			   |
			├-------------------------------┼------------------------------------------------------------------┤
			| log /var/log/openvpn.log 	 	|  日志文件							   			   				   |
			├-------------------------------┼------------------------------------------------------------------┤
			| verb 3					 	|  指定日志文件冗余									   			   |
			├-------------------------------┴------------------------------------------------------------------┤
			| 提示：先执行export LANG="ZH_GB18030"，然后编辑配置文件 server.conf，情空所有内容，把上面内容考到 |
			| 进来。然后，执行 dos2unix server.conf 本文档目录下，有参考配置文件 server.conf	  			   |
			└--------------------------------------------------------------------------------------------------┘ 
			
◾ 1.4.11  实际服务器端 VPN 配置文件 server.conf 配置 
		和默认样例配置相比，企业生产环境的配置改动如下：
		
		local 124.43.12.115
		port 52115
		push "route 10.0.0.0 255.255.255.0"
		client-to-client 
		duplicate-cn 
		log /var/log/openvpn.log
		
		
		最后查看服务器上的 server.conf
		[root@loclahost ~]# pwd 
		/etc/openvpn
		[root@bogon openvpn]# cat server.conf
		local 10.0.0.28
		port 52115
		proto tcp #推荐 tcp 
		dev tun
		ca /etc/openvpn/keys/ca.crt			#ca证书路径
		cert /etc/openvpn/keys/server.crt
		key /etc/openvpn/keys/server.key
		dh /etc/openvpn/keys/dh1024.pem
		server 10.8.0.0 255.255.255.0
		ifconfig-pool-persist ipp.txt
		keepalive 10 120
		comp-lzo
		persist-key
		persist-tun
		status openvpn-status.log
		verb 3
		push "route 192.168.1.24  255.255.255.0"  #push  192.168.1.24 ip到客户端
		client-to-client
		duplicate-cn
		log /var/log/openvpn.log
		
◾ 1.4.12 调试服务器端 VPN 服务启动环境
		a)取消服务器上防火墙iptables 对 Openvpn (默认 1194,本例 52115)的拦载。以及允许服务进行转发。
		b)selinux
		c)开启内核转发功能：
		[root@bogon openvpn]# sed -i 's#net.ipv4.ip_forward=0#net.ipv4.ip_forward=1#' /etc/sysctl.conf
		[root@bogon openvpn]# grep ip_forward /etc/sysctl.conf 
		net.ipv4.ip_forward=1
		[root@bogon openvpn]# sysctl -p
		
		
		[root@bogon openvpn]# firewall-cmd --permanent --zone=public --add-port=52115/tcp #防火墙开启52115端口
		success

◾ 1.4.13 启动服务端的VPN 服务并检查
		c) 启动 VPN 服务
		[root@bogon ~]# /usr/local/sbin/openvpn  --config /etc/openvpn/server.conf &   #<--(&表示后台执行)
		[1] 21508	<--看到这个表示启动成功
		
		[root@bogon ~]# netstat -lntup|grep vpn			#检查启动是否真的成功
		tcp        0      0 10.0.0.28:52115         0.0.0.0:*               LISTEN      21508/openvpn			
		
		设置开机自启动
		[root@bogon ~]# echo '#startup openvpn service by oldboy' >> /etc/rc.local 
		[root@bogon ~]# echo '/usr/local/sbin/openvpn --config /etc/openvpn/server.conf &' >> /etc/rc.local
		[root@bogon ~]# tail -2 /etc/rc.local
		#startup openvpn service by roye 
		/usr/local/sbin/openvpn --config /etc/openvpn/server.conf &
		
		#<--vpn 启动脚本中的启动 vpn 方法；
		/usr/local/sbin/openvpn --daemon --writepid /var/run/openvpn/server.pid --config server.conf --cd /etc/openvpn
		
		查看日志：		2.2.2
		[root@bogon ~]# tail /var/log/openvpn.log 
		Sat Aug 18 15:56:15 2018 Data Channel MTU parms [ L:1544 D:1450 EF:44 EB:135 ET:0 EL:0 AF:3/1 ]
		Sat Aug 18 15:56:15 2018 Listening for incoming TCP connection on 10.0.0.28:52115
		Sat Aug 18 15:56:15 2018 TCPv4_SERVER link local (bound): 10.0.0.28:52115
		Sat Aug 18 15:56:15 2018 TCPv4_SERVER link remote: [undef]
		Sat Aug 18 15:56:15 2018 MULTI: multi_init called, r=256 v=256
		Sat Aug 18 15:56:15 2018 IFCONFIG POOL: base=10.8.0.4 size=62
		Sat Aug 18 15:56:15 2018 IFCONFIG POOL LIST
		Sat Aug 18 15:56:15 2018 MULTI: TCP INIT maxclients=1024 maxevents=1028
		Sat Aug 18 15:56:15 2018 Initialization Sequence Completed
		Sat Aug 18 15:56:15 2018 IPv6 in tun mode is not supported in OpenVPN 2.2					
		
		vpn 启动之后生成的网卡 
		
		ifconfig 就可以看到该网卡
		
		tun0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1500
        inet 10.8.0.1  netmask 255.255.255.255  destination 10.8.0.2
        inet6 fe80::1af5:d335:2c62:5155  prefixlen 64  scopeid 0x20<link>
        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 100  (UNSPEC)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3  bytes 144 (144.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
		
		
		
		
		把客户端证书及CA证书安全的下载到本地
		[root@bogon ~]# sz oldboy.*.ca.* ctiantian. *-y
		特别提示：the sample configuration files are named server.conf and client.conf On Windows they are named 
		server.ovpn and client.ovpn
					
					
◾ 1.4.14 服务端 openvpn 常见启动故障与排错
		见结尾
					
					
◾ 1.4.15 配置常规方式启动 openvpn 服务				
		说明：如果前面把启动服务加到了 /etc/rc.local ,则此步忽略
		[root@bogon ~]# cp /root/test/openvpn-2.2.2/sample-scripts/openvpn.init /etc/init.d/openvpn #把 openvpn.init 复制到 /etc/init.d/ 目录下并改名为 openvpn
		[root@bogon ~]# chmod 700 /etc/init.d/openvpn 		#给openvpn设置权限
		[root@bogon ~]# cd /etc/init.d/
		[root@bogon init.d]# chkconfig  --add openvpn 
		[root@bogon init.d]# chkconfig  --list openvpn

		Note: This output shows SysV services only and does not include native
			systemd services. SysV configuration data might be overridden by native
			systemd configuration.
		
			If you want to list systemd services use 'systemctl list-unit-files'.
			To see services enabled on particular target use
			'systemctl list-dependencies [target]'.
		
		openvpn        	0:off	1:off	2:off	3:on	4:on	5:on	6:off  #默认启动3 , 4 , 5 
		
		[root@bogon init.d]# /etc/init.d/openvpn start
		Starting openvpn (via systemctl):                          [  OK  ]
		
		
		[root@bogon ~]# /etc/init.d/openvpn start 			#启动不了时查看日志
		Starting openvpn:[FAILED]
		[root@bogon ~]# killall openvpn 
		[root@bogon ~]# /etc/init.d/openvpn restart
		Shutting down openvpn:[ OK ]
		Starting openvpn:[ OK ]
		[root@bogon ~]# chkconfig openvpn on
		提示：openvpn server 的脚本内容见后文，如果openvpn目录下*.conf 过多会导致启动问题。
		
◼ 1.5 安装 Windows vpn 客户端配置 VPN	连接
		
◾ 1.5.1 下载并安装 openvpn客户端
		从 http://openvpn.se/download.html 上下载与openvpn服务器版本一致的Windows 客户福安 "OpenVPN GUI For Windows"
			├── 适合 win XP 
			│		openvpn-2.2.2-gui-1.0.3-install.exe
			│
			└── 适合 win 7 32 / 64 
					openvpn-2.2.2-install.exe(可以连接服务端的 openvpn-2.2.2.tar.gz)
			提示：高版本的客户端http://openvpn.se/development.html 
			提示：有不少网友和同学在WIN7 下联系 openvpn 都不成功，有的连接上之后，不能改路由，网上的答案是权限，兼
		容模式，其实这些都是多余的，在官网下最新的客户端，2.2.2装完之后配置好了就可以用了。
		http://swupdate.openvpn.org/community/releases/openvpn-2.2.2-install.exe 
		a)例如，服务器装的是OpenVPN 2.09，那么下载的 OpenVPN GUI fow windows 应该是：openvpn-2.2.2-gui-1.0.3-install.exe
		，一切采用默认设置。
		
		
		
◾ 1.5.2 配置并下载客户端证书
			将 ca.crt test.crt test.key client.conf  复制到 F:\software\openvpn\config\test ，就是安装文件的config目录下
		（不同用户使用不同证书，每个证书包括.crt 和 .key 两个文件，如 test.crt 和 test.key ）
			在 /etc/openvpn/client.conf 的基础上建立客户端配置文件，改名为C:\ProgramFiles\OpenVPN\config\client.conf
		，即先在服务器上建立配置文件，然后在下载改名到客户机上。
			
			下载好证书后放到安装目录下
		
			sz -y ca.crt test.crt test.key client.conf #这是在服务器端下载文件的命令
			
			#以下是在windows下 用 CMD 命令查看openvpn的安装目录
			F:\software\openvpn>tree
			卷 本地磁盘 的文件夹 PATH 列表
			卷序列号为 27AD-0B04
			F:.
			├─bin
			├─config	#把下载的配置文件放到config目录下还可以在此目录下在键一个文件夹然后放到这个文件夹下
			│  └─test	#下载下来的配置文件都在test文件夹下
			├─driver
			├─easy-rsa
			├─log
			└─sample-config
		
		
◾ 1.5.3 Client.conf 默认情况开启的配置：
			备份原始文件，然后过滤掉注释。
			[root@bogon ~]# cp /root/tools/openvpn/openvpn-2.2.2/sample-config-files/client.conf /etc/openvpn
			[root@bogon keys]# egrep -v "^#|^;|^$" client.conf
			client
			dev tun
			proto udp
			remote my-server-1 1194
			resolv-retry infinite
			nobind
			persist-key
			persist-tun
			ca ca.crt
			cert client.crt	<---根据情况改 如 roye.crt
			key client.key	<---根据情况改 如 roye.key
			ns-cert-type server
			comp-lzo
			verb 3
			提示：openvpn2.2.2 的版本和 2.0.9的 client.conf 区别 .2.0.9 下面参数是注释状态;ns-cert-type server 而 2.2.2 
		的参数是打开状态 ns-cert-type server。
		
		
			企业生产环境 client.conf 的配置如下：
			client
			dev tun
			proto udp
			remote my-server-1 1194
			resolv-retry infinite
			nobind
			persist-key
			persist-tun
			ca ca.crt
			cert client.crt	
			key client.key
			ns-cert-type server
			comp-lzo
			verb 3		
		
			和默认样例配置相比，改动如下：
			
			remote 10.0.0.28 52115 #连接到的vpn服务端ip地址和端口
			proto tcp			   #协议
			cert test.crt		   #客户端证书
			key  test.key		   #客户端密钥
		
		
◾ 1.5.3 在win10上 拨号远程连接 openvpn 服务	
		在windows右下角的openvpn图标 点击，选择"Connect",如下图所示：正常情况下应该能够连接成，并分配正常的IP地址。
		
		
		
		
		
		
		
		server  ip1 10.0.0.28 
				ip2 172.16.1.28
				一个网关：10.0.0.254
				
			服务端的配置文件
			local 10.0.2.15
			port 52115
			proto tcp
			dev tun
			ca /etc/openvpn/keys/ca.crt
			cert /etc/openvpn/keys/server.crt
			key /etc/openvpn/keys/server.key
			dh /etc/openvpn/keys/dh1024.pem
			server 10.8.0.0 255.255.255.0
			push "route 192.168.1.0 255.255.255.0"
			ifconfig-pool-persist ipp.txt
			keepalive 10 120
			comp-lzo
			persist-key
			persist-tun
			status openvpn-status.log
			verb 3
			client-to-client
			duplicate-cn
			log /var/log/openvpn.lo	
				

				
				
				
				
				
		client 	172.16.1.17
				无网关
				
				
				
				
				172.20.10.7
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
		
		
		
		
		
		
		
		
		
		
		
		

