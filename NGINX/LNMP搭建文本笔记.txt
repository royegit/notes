#Nginx 简介
#LNMP架构
#LNMP 服务管理方法
#Nginx 配置文件
#虚拟主机

Rewrite 重写



		检查nginx配置文件是否配置正确
		nginx -tc /usr/local/nginx/conf/nginx.conf
		
		
			##正则表达式
		.   	匹配除换行符以外的任意字符
		?   	重复0次或1次
		+		重复1次或多次
		*		重复零次或多次
		\d 		匹配数字
		^		匹配字符串的开始
		$		匹配字符串的结尾
		{n} 	重复n次
		{n,} 	重复n次或多次
		{c}		匹配单个字符c
		{a-z}	匹配a-z小写字母的任意一个
		\		转义字符
		( )		用于匹配括号之间的内容，通过$1,$2调用
		
		linux 可以用 pcregrep 这个命令来测试正则
		--------------------------------------------------------------------------------------
		[root@localhost ~]# pcretest
		PCRE version 8.34 2013-12-15
		
		    re> /(\d+)\.(\d+)\.(\d+)\.(\d+)
		data> 192.168.2.2
		0: 192.168.2.2  #匹配到的所有的内容
		1: 192          #表示第一个括号匹配到的内容
		2: 168			#表示第二个括号匹配到的内容
		3: 2			#表示第三个括号匹配到的内容
		4: 2			#表示第四个括号匹配到的内容
		data> 
		--------------------------------------------------------------------------------------
		
		
		
		
#LNMP添加、删除虚拟主机及伪静态使用教程
		
		在linux环境下执行 lnmp vhost add 命令然后根据提示一步步往下填写就可以	


		

负载均衡服务器


		所谓的一键安装包，实际上还是安装的源码包与RPM包，只是把安装过程写成了脚本，便于初学者安装
		优点： 简单、快速、方便
		缺点：
			不能定义安装软件的版本
			不能定义所需要的软件功能
			源码包的优势丧失

			


#Nginx 简介
		Nginx 是一款轻量级的Web服务器/反响代理服务器及电子邮件 (IMAP/POP3) 代理服务器，由俄国公司2004年发布的
		
		
		并发量
			Apache    400      2048
			nginx     1024     50000
		
		响应方式不同：
			Apache:           同步响应         400    同步响应是每一个进程只能支持一个用户访问，这个用户访问登录这个进程就分配给他直到他的访问终结之后这个进程才会被收回给下一个用户来使用
			nginx :			  异步响应 		  50000   只处理静态文件   
		



		
		//一键安装包下载地址
		https://lnmp.org/  
		
		//选择一个版本 wget下载
		wget http://soft.vpser.net/lnmp/lnmp1.5.tar.gz   
		
		//如果想装Apache 后面的参数是 lamp
		tar zxvf lnmp1.5.tar.gz
		cd lnmpl.5/
		./install.sh lnmp     
		
		安装的完整过程
		https://lnmp.org/install.html
		
		
		Nginx 目录：/usr/local/nginx/
		MySQL 目录：/usr/local/mysql/
		MySQL 数据库所在目录：/usr/local/mysql/var
		PHP目录：/usr/local/php/
		PHPMyAdmin 目录：/home/wwwroot/default/phpmyadmin/
		默认网站目录：/home/wwwroot/default/
		Nginx日志目录：/home/wwwlogs/
		虚拟主机配置文件所在目录：/usr/local/nginx/conf/vhost/
		
		
		//修改 phpmyadmin 配置文件 
		cd /home/wwwroot/default/phpmyadmin/config.inc.php 
		
		//把cookie修改成 http
		$cfg['Servers'][$i]['auth_type'] = 'http';   

	##LNMP相关的配置文件
		
		Nginx 主配置文件：/usr/local/nginx/conf/nginx.conf
		MySQL配置文件：   /etc/my.cnf
		PHP配置文件：	  /usr/local/php/etc/php.ini
		php-fpm配置文件： /usr/local/php/etc/php-fpm.conf
		
	##平滑重启：
		kill -HUP 主进程号
		
		
	##从新加载配置文件
		nginx -s reload -c /usr/local/nginx/etx/nginx.conf
		//检查配置语法
		nginx -tc /usr/local/nginx/etx/nginx.conf  
		
=======================================================================================================================================



	##Nginx 配置文件结构
		
		/usr/local/nginx/conf/nginx.conf.default   NGINX默认配置文件
		/usr/local/nginx/conf/nginx.conf		   LNMP作者写的配置文件
		
		下面是LNMP作者的配置文件内容
		
		1、配置文件结构
		
		
		
		
		基本配置
		...
		
		event{
			网络模型定义
			
			...
		}
		
		http{
			网站整体环境配置
			
			...
			server{
				一个可以访问的web服务器
				
				...
			}
			server{
				第二个可以访问的web服务器(相当于apache的虚拟主机)
				
				...
			}
		}
		
		
		
		
=======================================================================================================================================
		
		2、配置文件分析
		vim /usr/local/nginx/conf/nginx/nginx.conf
		
		
		
		#Nginx 服务器的为用户和为用户组
		user www www;  
		
		#启动进程，通常设置成和cpu的数量相等。相当于 cpu的核心数
		worker_processes 8; 
		
		把每一个进程绑定到一个cpu核心上
		#worker_cpu_affinity 0000000000000001 0000000000000010 0000000000000100 0000000000001000 0000000000010000 0000000000100000 0000000001000000 0000000010000000 	
		
		但是上面的配置是比较麻烦的所以nginx 1.9版本以后出来了 auto 配置这和上面是一样的效果
		worker_cpu_affinity auto;
		
		#错误日志
		error_loc logs/nginx_error_log; 
		
		#主进程 PID 保存文件
		pid   /usr/local/nginx/nginx.pid 
		#确定nginx已经是启动状态
		cat   /usr/local/nginx/nginx.pid 
		 

		#最大同时链接数设置	

		#文件描述符数量(针对进程文件句柄的限制)
		worker_rlimit_nofile 51200;

		
		#缓存临时文件配置到 cache目录下; levels=1:2 缓存目录分级，一般1:2; max_size=10g 表示这个目录控制他最大是10G;inactive=60m 表示60分钟内如果这个缓存文件没有被访问就清理掉
		#use_temp_path=off 表示不开启临时文件,一般建议关闭如果开启的话，会和缓存文件目录更新的时候容易出现一些性能的损坏;
		#proxy_cache_path /opt/app/cache  levels=1:2 keys_zone=imooc_cache:10m  max_size=10g inactive=60m use_temp_path=off; 		
		
		
		events
			{
				#网络 I/O 模型，建议 linux 使用 epoll,FreeBSD 使用 kqueue
				#epoll 是多路复用 IO(I/O Multiplexing)中的一种方式，但是仅用于 linux2.6以 上内存核，可以大大提高nginx的性能
				use epoll;
				
				#单个工作进程最大允许链接数(这个数值是每一个cpu核心总的能处理的数量如果现在是51200然后是8个核心就等于 51200*8=409600)
				worker_connections 51200;
				multi_accept on;
			}

			
			
			
			
			#linux系统默认是不支持打开5万个文件的，为了让linux系统和nginx一样可以同时打开5万个文件需要做两个配置
			#1、在nginx 配置 worker_rlimit_nofile 51200; 5万个描述符  
			#2、执行 ulimit -a 查看linux 系统支持最大的打开文件数
		
			#[root@localhost conf]# ulimit -a
			#core file size          (blocks, -c) 0
			#data seg size           (kbytes, -d) unlimited
			#scheduling priority             (-e) 0
			#file size               (blocks, -f) unlimited
			#pending signals                 (-i) 7234
			#max locked memory       (kbytes, -l) 64
			#max memory size         (kbytes, -m) unlimited
			#open files                      (-n) 1024      ##最大的打开文件数
			#pipe size            (512 bytes, -p) 8
			#POSIX message queues     (bytes, -q) 819200
			#real-time priority              (-r) 0
			#stack size              (kbytes, -s) 8192
			#cpu time               (seconds, -t) unlimited
			#max user processes              (-u) 7234
			#virtual memory          (kbytes, -v) unlimited
			#file locks                      (-x) unlimited
		

		
			#修改 linux 最大的打开文件数（linux 设置的最大的打开文件数要大于nginx设置的最大数）
			#[root@localhost conf]# ulimit -SHn 65535
			#[root@localhost conf]# 
			
			
		
		#http的整体环境配置 
		
		http{
				include       mime.types;
				
				#设定mime 类型，文件传送类型由  mime.types 文件定义
				default_type  application/octet-stream;
		
				server_names_hash_bucket_size 128;   #保存服务器名字的hash表大
				client_header_buffer_size 32k;		 #客户端请求头部缓冲区大小
				large_client_header_buffers 4 32k;	 #最大客户端头缓冲大小
				client_max_body_size 50m; 			 #客户端最大上传文件大小（M）
				
				#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘 IO 重复载应用，可设置为off，以平衡磁盘与网络 I/O 处理速度，降低系统的uptime
				sendfile   on;
				
				#这个是默认的，结果就是数据包不会马上传送出去，等到我数据包最大时，一次性的传输出去，这样有助于解决网络堵塞，(只在sendfile on 时有效)
				tcp_nopush on;
		
				#链接超时时间
				keepalive_timeout 60;
		
				#禁用 nagle 算法，也即不缓存数据
				tcp_nodelay on;
		
				#fastcgi 设置
				fastcgi_connect_timeout 300;  #链接超时时间
				fastcgi_send_timeout 300;     #发送超时时间
				fastcgi_read_timeout 300;	  #接收的超时时间
				fastcgi_buffer_size 64k;	  #缓冲的大小
				fastcgi_buffers 4 64k;
				fastcgi_busy_buffers_size 128k;
				fastcgi_temp_file_write_size 256k;
				
				&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
				#网络压缩
				
				#意思是如果用nginx来进行浏览器访问的话，它的数据不是直接发送。而是先压缩在发送到了地方在解压
				#这种方法的好处是节约带宽，因为发送的是压缩包。坏处是客户端和服务器端都要浪费一定的运算资源
				gzip on;
				
				#设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩。建议设置成大于1K。如果小于1K可能会越压越大。
				gzip_min_length  1k;
				
				#压缩缓冲区大小。表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果。
				gzip_buffers     4 16k;
				
				#压缩版本（默认1.1，前端为squid2.5时使用1.0）用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。
				gzip_http_version 1.1;
				
				#压缩比率。用来指定GZIP压缩比，1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源。
				gzip_comp_level 2;
				
				#用来指定压缩的类型，“text/html”类型总是会被压缩
				gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;
				gzip_vary on;
				gzip_proxied   expired no-cache no-store private auth;
				gzip_disable   "MSIE [1-6]\.";
				&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
				
				
				#limit_conn_zone $binary_remote_addr zone=perip:10m;
				##If enable limit_conn_zone,add "limit_conn perip 10;" to server section.
				
		
				#隐藏nginx版本号(curl -I 192.168.4.154可以查看，更加安全)；
				server_tokens off;
				
				access_log off;
		
		server{
				#监听端口
				listen 80 default_server;
				#listen [::]:80 default_server ipv6only=on;
				
				#网站域名
				server_name _;  
				
				#默认网站的文件名，谁靠前谁的优先及最高
				index index.html index.htm index.php;

				#网页主目录
				root  /home/wwwroot/default;			
				
				
				#   #error_page 错误页面 如果报有 500 502 503 504  错误时统一用一个页面表示
				#error_page 500 502 503 504   /50x.html;
				#   #定义错误文件的位置
				#location = /50x.html{
				#    root  /usr/share/nginx/html;
				#}
		
				#location / {
				#	 #当前的请求如果找不到这个目录就到 @java_page 代理请求
				#   root /opt/app/code/cache;
				#	 
				#	 #try_files是检测文件是否存在如果不存在就执行对应的规则 @java_page
				#	 try_files $uri @java_page;
				#}
				
				#
				#location @java_page{
				#
				#	proxy_pass http://127.0.0.1:9090;
				#
				#}
				#

				
			#Rewrite重定向域名跳转		
		
				#绝大多数的跳转只要 last
				#如果是实现域名跳转在后面加 permanent
				#
				#注意nginx 的域名重定向是写在server内的
				
				## flag
				#last 		停止 rewrite 检测
				#break		停止 rewrite 检测
				#redirect 	返回302临时重定向，地址栏会显示跳转后的地址
				#permanent	返回301永久重定向，地址栏会显示跳转后的地址(客户端会永久保存这个重定向的结果)
				
				#如果匹配到 以 /break开头的参数直接 break 返回404
				#location ~ ^/break{
				#	rewrite ^/break /test/ break;
				#}
	
				#如果匹配到 /last开头的参数如果找不到test文件夹就重写地址栏改成访问test路径，这就跳到了/test/ 返回  success
				#location ~ ^/last{
				#	rewrite ^/last /test/ last;
				#}
				
				
				#如果地址栏里匹配到test 将返回json格式的 success 
				#location /test/{
				#	default_type application/json;
				#	
				#	return 200 '{"status":"success"}';
				#}					
				

				#域名重定向 rewrite 规则
				#如果匹配到 www.sina.com 赋给变量 $http_host
				if($http_host=www.sina.com){ 
					rewrite (.*) http://www.sohu.com permanent;  如果$http_host变量有任何内容 跳转到 www.sohu.com 
				}
				
				#文件跳转
				#当在浏览器中匹配到 test文件的时候 跳转到 index.html 文件跳转需要注意必须要加 / 要不然会找不到文件
				rewrite test /index.html last; 			
				

			##反向代理
				#     #如果域名匹配到以test_proxy.html结尾的就反向代理到 http://127.0.0.1::8080
				#location ~/test_proxy.html${
				#	proxy_pass http://127.0.0.1::8080;
				#
				#   #proxy_redirect配置默认就可以
				#	proxy_redirect  default;      
				#	
				#	#就是把NGINX 代理往后端 real server 发送信息时添加的头信息（就是保持原有的请求地址，如果想在一个服务器上配置多个域名时需要使用反响代理，因为80端口只有一个所以请求时需要代理到别的端口）
				#	proxy_set_header Host $http_host;
				#
				#	#因为后端的 real server 通过代理是没法获取到真实的IP的(往往都是要做用户访问限制或是基于IP的一些功能定位啊什么的)常常会用到获取到用户的IP信息
				#	#所以我们需要从前端把真实的IP带到后端去
				#	proxy_set_header X-Real-IP $remote_addr;
				#
				#	#超时配置
				#	#tcp 链接限制30秒
				#	proxy_connect_timecout 30;
				#	proxy_send_timeout 60;
				#	proxy_read_timeout 60;
				#
				#	#proxy_buffer_size 默认缓冲区里所读取的第一部分头信息的大小
				#	proxy_buffer_size 32k;
				#	proxy_buffering on;
				#
				#	#打开proxy_buffering 后就对应的需要设置proxy_buffering的大小
				#	proxy_buffers 4 128k;
				#	proxy_busy_buffers_size  256k;
				#	proxy_max_temp_file_size 256k;
				#	
				#
				#}

				
				
				
			##正向代理
				#从这个服务器代理到指定的服务器
				#DNS 解析
				#resolver 8.8.8.8;
				#
				#$http_host域名服务器，地址参数$http_host
				#location / {
				#
				#   #把访问到这里的域名重新代理到真正请求的网址
				#	proxy_pass http://$http_host$request_uri;
				#	
				#}

				
				
				# root 和 alias 区别
				#
				#location /request_path/image/ {
				#root  /local_path/image/;
				#
				#}
				#
				#如果配置了请求地址 有 /request_path/image/ 的话那访问的实质地址是
				#http://www.imooc.com/request_path/image/cat.png 
				#
				#/local_path/image/request_path/image/cat.png
				#
				#同样的如果不用 root 指定路径而是用 alias
				#
				#location /request_path/image/ {
				#	alis  /local_path/image/;
				#}
				#同样的地址
				#http://www.imooc.com/request_path/image/cat.png 
				#
				#/local_path/image/cat.png
				#
				#
				#
				
				
				# Deny access to PHP files in specific directory
				#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }				
		
				include enable-php.conf;
				
				#没有加 ~ 号的匹配意思是完整的字符串访问 /nginx_status
				#location  控制着每一层的路径
				location /nginx_status
				{
					stub_status on;
					access_log   off;
				}
				
				
				
				
				#只要在url当中匹配到 以下任意后缀
				location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$  # 只加波浪号匹配代表不区分大小写 。后面是标准正则
				{
					expires      30d;    #缓存30天
				}
				
				
				
				
				#匹配到 js或是css的文件 
				location ~ .*\.(js|css)?$
				{
					expires      12h;  #缓存12小时
				}
		
				location ~ /.well-known {
					allow all;
				}
		
				location ~ /\.
				{
					deny all;
				}
				#访问日志
				access_log  /home/wwwlogs/access.log;
			}
		#vhost/ 子配置文件
		include vhost/*.conf;
		}
		
		
=======================================================================================================================================
	
#负载均衡
		#nginx 只能做负载均衡或是网站，不能又是负载均衡又是网站
		
		#首先把 server{ } 部分删掉或是注释掉 虚拟主机部分也不用（include vhost/*.conf;）
		
		#负载均衡
		http{
		
			#负载均衡服务器池
			upstream myweb1{
				#定义地址池（告诉nginx有多少个服务器，它们的ip是多少）
				
					#后端服务器在负载均衡调度中的状态
					#down 			当前server 暂时不参与负载均衡
					#backup  		预留的备份服务器
					#max_fails  	允许请求失败的次数
					#fail_timeout  	经过max_fails失败后，服务暂停的时间
					#max_conns		限制最大的接收链接数
					
				#调度算法
					#轮询			按时间顺序逐一分配到不同的后端服务器
					#加权轮询		weight 值越大，分配到的访问机率越高
					#ip_hash		每个请求按访问IP的hash结果分配，这样来自同一个IP的固定访问一个后端服务器(这样使得用户的cookie和session能够保持一致)
					#url_hash  		按照访问的URL的hash结果来分配请求，是每个URL定向到同一个后端服务器
					#least_conn 	最少链接数，那个机器链接数少就分发
					#hash关键数值	hash 自定义的key

					#hash $request_url;										 #url 哈希每当请求的是同一个url的时候就会定位到同一台服务器上
					server 192.168.244.10:80  down;   						 #down 表示这个服务器不提供服务
					server 192.168.244.11:80  backup weight=5; 				 #表示备份节点; weight=5表示加权轮询 如果有7个请求有个给这台服务器
					server 192.168.244.11:81  max_fails=1 fail_timeout=10s;  #最大的失败次数1次 链接超时时间 10秒
			}
			server{
				listen 80;
				#使用 www.sohu.com访问
				server_name www.souhu.com;
							
				localhost /{
				
					#调用地址池
					proxy_pass http://myweb1;
					
					
					#定义故障转移。后端服务器节点返回 500 502 503 504 和超时等错误时，自动把请求转发到另一台服务器，转移故障。
					#一旦发现有服务器请求错误就把请求发送到另一台服务器
					proxy_next_upstream http_500 http_502 http_503 eror timeout invalid_header;
					
					#利用HOST 变量向后端服务器传递需要解析的客户端访问的域名（传递域名）
					proxy_set_header Host $host;
					
					#remote_addr 把客户端真实IP赋予 X-Forwarded-Forh。后端服务器才能获取真实的客户端IP。以便记录日志，要不日志中记录的访问信息都是负载均衡服务器，而不是客户端（传递IP）
					proxy_set_header X-Forwarded-For $remote_addr;
					
					
				}
				
			}
		}
		

		
		
=======================================================================================================================================
	
		
		
		
		user  www www;

		worker_processes auto;
		
		error_log  /home/wwwlogs/nginx_error.log  crit;
		
		pid        /usr/local/nginx/logs/nginx.pid;
		
		#Specifies the value for maximum file descriptors that can be opened by this process.
		worker_rlimit_nofile 51200;
		
		
		events
			{
				use epoll;
				worker_connections 51200;
				multi_accept on;
				user  www www;
				
				worker_processes auto;
				
				error_log  /home/wwwlogs/nginx_error.log  crit;
				
				pid        /usr/local/nginx/logs/nginx.pid;
				
				#Specifies the value for maximum file descriptors that can be opened by this process.
				worker_rlimit_nofile 51200;
			}

		
		http
			{
				include       mime.types;
				default_type  application/octet-stream;
		
				server_names_hash_bucket_size 128;
				client_header_buffer_size 32k;
				large_client_header_buffers 4 32k;
				client_max_body_size 50m;
		
				sendfile   on;
				tcp_nopush on;
		
				keepalive_timeout 60;
		
				tcp_nodelay on;
		
				fastcgi_connect_timeout 300;
				fastcgi_send_timeout 300;
				fastcgi_read_timeout 300;
				fastcgi_buffer_size 64k;
				fastcgi_buffers 4 64k;
				fastcgi_busy_buffers_size 128k;
				fastcgi_temp_file_write_size 256k;
		
				gzip on;
				gzip_min_length  1k;
				gzip_buffers     4 16k;
				gzip_http_version 1.1;
				gzip_comp_level 2;
				gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;
				gzip_vary on;
				gzip_proxied   expired no-cache no-store private auth;
				gzip_disable   "MSIE [1-6]\.";
		
				#limit_conn_zone $binary_remote_addr zone=perip:10m;
				##If enable limit_conn_zone,add "limit_conn perip 10;" to server section.
		
				server_tokens off;
				access_log off;
				
				
			#定义负载均衡地址池	
			upstream myweb1{
				#定义地址池（告诉nginx有多少个服务器，它们的ip是多少）
					server 192.168.244.10:80
					server 192.168.244.11:80
			}
		#server
		#	{
		#		listen 80 default_server;
		#		#listen [::]:80 default_server ipv6only=on;
		#		server_name _;
		#		index index.html index.htm index.php;
		#		root  /home/wwwroot/default;
		#
		#		#error_page   404   /404.html;
		#
		#		# Deny access to PHP files in specific directory
		#		#location ~ /(wp-content|uploads|wp-includes|images)/.*\.php$ { deny all; }
		#
		#		include enable-php.conf;
		#
		#		location /nginx_status
		#		{
		#			stub_status on;
		#			access_log   off;
		#		}
		#
		#		location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
		#		{
		#			expires      30d;
		#		}
		#
		#		location ~ .*\.(js|css)?$
		#		{
		#			expires      12h;
		#		}
		#
		#		location ~ /.well-known {
		#			allow all;
		#		}
		#
		#		location ~ /\.
		#		{
		#			deny all;
		#		}
		#
		#		access_log  /home/wwwlogs/access.log;
		#	}
		#include vhost/*.conf;
		
		
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		