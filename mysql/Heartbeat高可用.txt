8.1Heartbeat 介绍
	8.1.1 Hearbeat 作用
			通过 hearbeat,可以将资源（IP及程序服务等资源）从一台已经故障的计算机快速转移到另一台正常运转的机器上继续提供服务，
		一般称之为 高可用服务。在实际生产应用场景中，hearbeat的功能和另一个高可用开源软件 keepalived有很多相同之处。
		hearbeat 官方地址:http://linux-ha.org/wiki/Main_Page
		
		
		切换的常见条件：
			1）服务器宕机。（如果是apache,或是mysql故障则不会切换）
			2）Heartbeat 服务本身故障。
			3）心跳链接故障。
			服务故障不会导致切换
			
			
			
			
			
			
	充实基础，
		a）第一阶段课程很重要。
		b）已经讲过的架构方案复习
			1）代码发布架构方案，软件发布方案（RPM包制作，yum仓库搭建）
			2）VPN 远程拨号，跨机房互联，翻墙方案。通过LDAP统一认证，大数据拉光纤。
			3）用户统一认证ldap，vpn,svn,ftp,samba。跨机房用户统一认证。
			4）集群高可用：1）大数据小文件迁移。2）存储高可用。3）MYSQL数据库高可用。
		c）改变单一软件应用细想。组合拳。
			
			
			
									+-------------------+ 					  +-------------------+  
									|		db-1-1		| 	 Heartbeat		  |		db-1-2		  |  
									|					| 	<------------>	  |					  |  
									|	MySQL(M-Active) | 	DRBD(200MB/S)	  |	MySQL(M-inActive) |  
									|					| 	------------->	  |					  |  
									|	  DRBD分区1	    | 					  |	  DRBD分区1	      |  
									|       Meta		| 					  |       Meta		  |      
									+-------------------+ 					  +-------------------+   	
										 ↖   ↖	↖										╱
									       ╲   ╲	  ╲								  ╱
										     ╲   ╲	╲								╱
										       ╲   ╲	  ╲						  ╱
									   vip =10.0.0.16 ╲	╲					    ╱
										           ╲   ╲	  ╲				  ╱
											       	 ╲   ╲    ╲				╱
											       	   ╲   ╲	  ╲	 	  ╱
											       		 ╲   ╲	↘		╱
													+------╲---╲-------------------------------+
													|	    ↗	  ╲				  			 |
													|     ╱        ╲	千兆交换机	  			 |
													|   ╱			 ↑				  			 |
													+-╱------------ /---------------------------+╲
													╱		        /				╲				╲
											   	  ╱		       /				  ╲			  ╲
												╱  		      /						╲				╲
								+------------------+ 	 +------------------+ 		+------------------+  +------------------+ 
								|   mysql slave1   | 	 |   mysql slave2   | 		|   web server1    |  |   web server2    | 
								+------------------+ 	 +------------------+ 		+------------------+  +------------------+ 
	

    	10.1.5生产服务器硬件配置：
			
			+---------------+------------------------------------------------------------+
			|  设备名称：	|	配置描述												 |
			+---------------+------------------------------------------------------------+
			| CPU：			| 两颗 四核至强处理器 Intel(R) Xeon(R)CPU E5606 @2.13GHz     |
			+---------------+------------------------------------------------------------+
			| MEM:			| 16GB(4x4GB) 667MHz										 |
			+---------------+------------------------------------------------------------+
			| Raid:			| SAS/SATA Raid 10 SAS6I Raid 卡 （支持1/0/5/6 /10）		 |
			+---------------+------------------------------------------------------------+
			| DISK:			| 600GB*6   3.5英寸 SAS 硬盘15k								 |
			+---------------+------------------------------------------------------------+
			| 网卡：		| 集成 4 个 Broadcom 千兆网卡  支持 TOE 功能				 |
			+---------------+------------------------------------------------------------+
			
		10.1.7 网卡及 IP 资源	
			+---------------+-------------+----------------+--------------------------------------+
			|     名称：	|	接口      |		IP         |			用途				      |
			+---------------+-------------+----------------+--------------------------------------+
			|    MASTER		| 	eth0	  |	10.0.0.7       | 管理 IP 用于 LAN内数据转发		  	  |
			+---------------+-------------+----------------+--------------------------------------+
			|    			| 	eth1   	  |	10.0.10.7	   | 用于 MYSQL 服务器间心跳连接（直连）  |				
			+---------------+-------------+----------------+--------------------------------------+
			|       		|	eth2   	  | 10.0.11.7	   | 用于 MYSQL 服务器DRBD同步（直连）	  |
			+---------------+-------------+----------------+--------------------------------------+
			| VIP			|			  | 10.0.0.17	   | 用于提供对外 MYSQL 数据库服务VIP 	  |			 
			+---------------+-------------+----------------+--------------------------------------+
			|        BACKUP |   eth0	  | 10.0.0.8	   | 管理 IP 用于 LAN 数据转发			  |
			+---------------+-------------+----------------+--------------------------------------+			
			|				|   eth1 	  | 10.0.10.8	   | 用于MYSQL 服务器间心跳连接（直连）   |
			+---------------+-------------+----------------+--------------------------------------+
			| 				|   eth2	  | 10.0.11.8	   | 用于 MYSQL 服务器 DRBD 同步（直连）  |
			+---------------+-------------+----------------+--------------------------------------+
			| VIP			|			  |				   |									  |
			+---------------+-------------+----------------+--------------------------------------+
			
			
		MySQL 数据库优化：物理机
			1、硬件优化 
				a.CPU 64位CPU 一台机器8-16颗CPU。2-4颗。
				b.mem 96G-128G。3-4个实例。32G-64G，跑2给实例。
				c.disk 数量越多越好。性能ssd(高并发) > sas（普通业务线上）>sata（线下）
				  raid 4块盘:RAIDO > RAID10 > RAID5 >RAID1。
				d.网卡 多块网卡bond,以及buffer,tcp优化 。
				  
			2、软件优化
				
			3、my.cnf 里参数的优化
				注意：my.cnf 里参数优化的幅度很小。大部分架构以及SQL语句优化。
				思想：
				监控：生产参数是一般情况下参数。
					命令监控：show global status \G
					调忧工具：mysqlreport  
							http://www.day32.com/MySQL/tuning-primer.sh
			
			4、SQL 语句的优化
				a、索引优化
					1）白名单机制--百度，项目开发，DBA参与，减少上线后的慢SQL数量。
					抓出慢SQL，配置my.cnf
					long_query_time=2
					log-slow-queries=/data/3306/slow-log.log 
					按天轮询：slow-log.log 
					
					
					
					2）慢查询日志分析工具--mysqlsla （推荐）
					mysqldumpslow,mysqlsla ,myprofi,mysql-explain-slow-log,mysqllogfilter比较
			
			
					3）每天晚上0点定时分析慢查询，发到核心开发，DBA分析，及高级运维，CTO的优先里。
					DBA分析给出优化建议-->核心开发确认更改-->DBA线上操作处理
					
				b、大的复杂的SQL语句拆分成多给小的SQL语句。
					子查询，JOIN连表查询，某个表4000完条记录。
				c、数据库是存储数据的地方，但是不是计算数据的地方。
				对数据计算，应用类处理，都要拿到前端应用解决。禁止在数据库上处理。
				d、搜索更能，like'%老男孩%'，一般不要用MYSQL数据库。

		5、架构上的优化			
				1、业务拆分：搜索功能，like	'%老男孩%'，一般不要用MySQL数据库。
				2、业务拆分：某些业务应用使用nosql持久化存储，例如：memcahcedb,redis,ttserver。
				粉丝关注，好友关系等等。
				3、数据库前端必须要加cache。例如memcached,用户登录，商品查询。
				4、动态数据静态化。整个文件静态化，页面片段静态化。
				5、数据库集群与读写分离。-主多从。通过程序或者dbproxy进行集群读写分离。
				6、单表超过2000万。拆库拆表。人工拆表拆库（登录、商品，订单）
				7、百度、阿里国内前三公司 会这样搞。
				
		6、流程，制度，安全优化
			任何一次人为数据库记录的更新，都要走一个流程：
				a.人的流程：开发-->核心开发-->运维或DBA
				b.测试流程：内网测试-->IDC测试-->线上执行
				c.客户端管理，PHPMYADMIN。
					
					
					
					
	linux java/http进程高，解决案例 strace   
	 http://www.tuicool.com/articles/YFVbia
					
					
					
					
					
					
					
					
					
					
					
					
					
					
			
			
			
			
			
			
			
			
			
			
			
			