什么影响了数据库性能
	影响性能的几个方面
		1、服务器的硬件
			每当我们的计算机响应不够快是我们通常想的是我们的CPU不够快内存不够多或是磁盘I/O太慢这些因素引起的，同样这些问题在服务器上也会
			存在所以这是人们最容易找到的影响因素之一
		2、服务器系统
			可能我们会发现我们电脑带有的操作系统运行的比在其他操作系统上比较的顺畅。而对于同样的操作系统有时我们配置参数不同运行的流畅程
			度也会有不同。比如 Windows XP 默认的TCP参数只有10个而当我们把这参数调大之后我们就会发现可以大大的加快我们下载的速度。
			同样在服务器上的操作系统也需要优化，但是服务器上的操作系统需要配置的参数要比计算机上的系统要多的多。
		3、数据库的存储引擎的选择
			众所周知MySQL的最大特点就是他插件是的存储引擎的设计我们可以根据我们的业务的不同需求。选择我们所需要的任何一种存储引擎而不同存
			储引擎也有不同的特点比如MyISAM这种存储引擎他是不支持事务的，同时它使用的是一种表级锁
			MyISAM:不支持事务，表级锁
		
			InnoDB:事务级的存储引擎，完美的支持行级锁，事务ACID特性。
			但是我们并不能就因此说InnoDB一定就比MyISAM要好在有些场景下我们会发现使用MyISAM 可能会更加的合适关于存储引擎的选择我们下面还会
			有详细的介绍而影响数据库性能的第四个因素
		4、数据库参数配置
			MySQL有上百项的配置参数，不同的存储引擎也要相应的配置参数，这其中有些参数对性能的影响是微乎其微的。但是有些参数对性能却起着“
			决定性的影响”所以根据我们所选择的存储引擎和业务模式的不同对不同的参数进行优化也是我们做为DBA的一个关键技能。前面所有的因素
			（服务器硬件，服务器系统，数据库存储引擎的选择）加起来对性能的影响可能也没有最后一个对数据库性能影响大了。
		5、数据库表结构的设计和SQL语句
			表结构的设计和SQL语句的执行效率对数据库的性能的影响，我们在进行数据库结构设计的时候因为要考虑到今后我们要在这个数据库中执行
			什么样的SQL语句来对我们所设计的这个表结构进行查询和更新只有这样才能设计出符合我们SQL查询优化逻辑的表结构。
			慢查询：可以说是大多数数据库问题的罪魁祸首而很多的这种有效率问题的SQL，就是由于我们对数据库的库表结构设计的不合理而产生的而
			对于这里SQL来说也是最难优化的，因为我们的业务一旦上线就很难在对响应的库表结构进行更改了，所以我们数据库的性能优化的重点在于
			数据库的库表结构的设计和SQL语句的编写和优化上。
			
			以上就是所有会对我们数据库的性能造成影响的一些因素，下面我们来详细看一下以上所提到的这些对性能有影响因素的我们应该如何进行优化
			
			
			CPU的选用：
				首先看我们的应用是否是CPU密集型的，对于CPU密集型的应用要加快SQL语句的处理速度，显然我们需要的是更好的CPU而不是更多的CPU。
				还有一点有注意我们之前也提到过对于目前版本的MYSQL而言还不支持多CPU对同一SQL的并发处理，也就是说不管SQL多复杂或是多简单我
				们都只能用到一个CPU的核心进行处理。这时多个CPU对提高SQL的处理效率显然是没有帮助的。
				接下来我们还要了解我们系统的并发量是如何的虽然但个SQL无法利用到多个CPU资源而如果我们要提高系统的吞吐量或者是并发处理量那这时
				我们就需要CPU越多越好。（但是个人觉得CPU的数量比较重要）
				同时还需要考虑所使用的MySQL的版本，老板本的MySQL对多核的CPU的支持并不好对于5.0之前的版本这个限制是非常严重的。而现在的5.6和
				5.7的版本对多核CPU的版本已经有了很大的改善我们可以放心的使用16核还有32核这样的CPU。
			内存的选用：
				频率越高速度越快所以主板支持的最大内存频率
				组成购买升级
				每个通道内存：相同品牌，颗粒，频率，电压效验技术和型号
				单条容量要尽可能大
				
	CentOS系统参数优化：
	对数据库的影响比较大
		
		内核相关的参数（/etc/sysctl.conf）
			网络相关的参数
				对于一个TCP文件来说服务器于客户端执行需要进行三次握手，来建立网络的链接当三次握手成功之后
				net.core.somaxconn=65535;  		    #设置监听队列的长度。这个参数的默认值会比较小对于负载很大的服务器来说一定是不够的一般会把他设置成 2048或是更大的值
				net.core.netdev_max_backlog=65535;  #在每个网络接收数据包的速率比内核处理速率快的时候
				net.ipv4.tcp_max_syn_backlog=65535; 
				
				net.ipv4.tcp.fin_timeout=10;		#用于控制TCP链接处理的那种等待状态的那种时间对于链接比较平凡的系统通常是有大量的链接是属于等待状态的而这个参数就是用来减少这个状态的这种timeout的时间加快TCP连接的回声
				net.ipv4.tcp.tw_reuse=1;			#这在高负债的情况下是非常重要的如果有大量的数据库连接请求而这时TCP连接又被占满了的话就会出现数据库无法连接的错误
				net.ipv4.tcp.tw_recycle=1;
				
				
				#这四个参数是决定了TCP连接接收和发送缓冲区大小的默认值和最大值，对于数据库来将相对来说也是需要把他调的大一些
				net.core.wmem_default=87380;
				net.core.wmem_max=87380;
				net.core.rmem_default=87380;
				net.core.rmem_max=16777216;
				
	
				#这三个参数是用于减少失效连接所作用的这种TCP的一种资源数量 加快资源回收的效率 tcp_keepalive_time 表示tcp发送 keepalive 探测消息时间的间隔单位为秒用于确认TCP连接是否有效
				#而 tcp_keepalive_intvl 用于控制当探测的消息未获得响应时从发该消息的时间间隔当然同样是秒
				#最后一个参数表示在确定tcp连接失效之前最多发送多少个这种 keepalive  探测消息这三个参数的默认值对于一个平凡系统来说都有一点大了所以这里分别给它们设置的小了一些
				
				net.ipv4.tcp_keepalive_time=120;
				net.ipv4.tcp_keepalive_intvl=30;
				net.ipv4.tcp_keepalive_probes=3;
	
	
				#以上就是大多数linux系统中的对于大多数网络性能的一些相关参数当然还有很多相关参数这里没有介绍到。
				如果有兴趣的话可以看看自己的系统手册啊之类的书籍。
			
			
			内存相关的参数
				#linux 内涵参数中重要的参数之一，用于定义共享内存的最大值。
				#1、这个参数应该设置的足够大，以便能在一个共享内存段下容纳下整个的Innodb缓冲池的大小
				#2、这个值的大小对于64位系统，可取的最大值为物理内存值-1byte,建议值为大于物理内存一半，一般取值大于Innodb缓冲池的大小即可，可以区物理内存-1byte.
				kernel.shmmax=4294967295;
				
				
				
				#这个参数当内存不足时会对性能产生比较明显的影响
				#linux 系统内存交换区：
					在linux系统安装时都会有一个特殊的磁盘分区，称之为系统交换分区。
					如果我们使用free-m在系统中查看可以看到类似下面的内容其中swap就是交换分区。
					当操作系统因为没有足够的内存时就会将一些虚拟内存写到磁盘的交换区中这样就会发生内存交换。
					
					在MySQL服务器上是否使用交换分区有争议：在MySQL服务所在的linux系统上完全禁用交换分区
					代理的风险：
						1、降低操作系统的性能
						2、容易造成内存溢出，崩溃，或者被操作系统kill掉
					结论：
						在MySQL服务器上保留交换区还是很必要的，但是控制何时使用交换分区
					vm.swappiness设置为0意思就是告诉linux内核除非虚拟内存完全满了，否则不要使用交换区。
				vm.swappiness=0;
				
		增加资源限制（/etc/security/limit.conf）
			这个文件实际上是linux PAM也就是插入式认证模块的配置文件。打开文件数的限制‘
			* 		表示对所有用户有效
			soft 	指的是当前系统生效的设置
			hard	表明系统中所能设定的最大值
			nofile  表示所限制的资源是打开的文件的最大数目
			65535	就是限制的数量
			*soft nofile 65535 -|
								 >加到limit.conf文件的末尾就可以。
			*hard nofile 65535 -|

			结论：
				把可打开的文件数量增加到65535个以保证可以打开足够多的文件句柄。
			注意：
				这个文件的修改需要重启系统才可以生效
				
		
		
		
		磁盘调度策略（/sys/block/devname/queue/scheduler）
			对磁盘性能有影响的相关配置
				cat /sys/block/sda/queue/scheduler
				noop anticipatory deadline [cfq]
				
				如上所示这个linux系统用的是cfq策略这个策略用于桌面级的系统应该是没有问题的，但是用于mysql服务就不太合适了
				在mysql工作负载下cfq由于会在作业中插入一些不必要的请求所以会导致很差的响应时间除了cfq策略外还存在了几种策
				略包括：
					noop(电梯式调度策略)
						NOOP实现了一个FIFO队列，它像电梯的工作方法一样对I/O 请求进行组织，当有一个新的请求到来时，它将请求
						合并到最近的请求之后，以此来保证请求同一介质。NOOP倾向饿死读而利于写，因此NOOP对于闪存设备，RAM及嵌
						入式系统是最好的选择。
					deadline（截止时间调度策略）
						Deadline确保了在一个截止时间内服务请求，这个截止时间是可调整的，而默认读期限短于写期限。这样就防止
						了谢操作因为不能被读取而饿死现象，Deadline对数据库类应用是最好的选择。
					anticipatory (预料I/O调度策略)
						本质上符Deadline一样，但在最后一次读操作后，要等待6ms，才能继续进行对其他I/O请求进行调度。它会在每个
						6ms中插入新的I/O操作，而会将一些小写入流合并成一个大写入流，用写入延时换取最大的写入吞吐量。AS适合于
						写入较多的环境，比如文件服务器，AS对数据库环境表现很差。
						
	MySQL常用的存储引擎之MyISAM
		MyISAM存储引擎表由MYD和MYI组成
		Mysql文件， .frm 是用来存储MyISAM表的结构的 MYD是有存储表的数据信息，MYI存储的是索引信息
		
		并发性与锁级别
		表损坏修复(意外关闭而损坏的表进行修复，修复时可能会造成数据的丢失)
		check table tablename	 #检查表
		repair table tablename;  #恢复表
		
		如果MyISAM是一张很大的只读表的话就是在表创建完并导入数据后就不会对表进行任何操作了那我们就可以对表进行压缩操作这样可以减少磁盘I/O
		
		myisampack -b -f myISAM.MYI  压缩表数据

		限制：
			版本<MySQL5.0时默认表大小为4G 	如存储大表超过4G的数据则需要修改MAX_Rows 和AVG_ROW_LENGTH
			版本>MySQL5.0时默认支持为256TB

		适用场景：
			非实物型应用（数据仓库报表类的应用，大多数不涉及到财务的应用）
			只读类应用
			空间类（如GPS数据）
		
		MyISAM 引擎调优精要:
			1、设置合适的索引（缓存机制）
			2、调整读写优先级，根据实际需求确保重要操作更忧先执行
			3、启用延迟插入改善批量写入性能（降低写入频率，尽可能多条数据一次性写入）。
			4、尽量顺序操作让insert数据都写入到尾部，减少阻塞。
			5、分解大的时间长的操作，降低单个操作的阻塞时间。
			6、降低并发数（减少对MySQL 访问），某些高并发场景通过应用进行排队队列机制
			7、对于相对静态（更改部频繁）的数据库数据，充分利用Query Cache 或memcached 缓存服务可以极大的提高访问效率。
			8、MyISAM的Count 只有在全表扫描的时候特别高效，带有其他条件count都需要进行实际的数据访问
			9、可以把主从同步的主库使用innodb，从库使用MyISAM引擎（不推荐）
		
		
		
		MySQL5.5及之后版本默认存储引擎InnoDB
		InnoDB使用表空间进行数据存储
			innodb_file_per_table
			
			innodb系统表空间和独立表空间要如何选择
			比较：
				系统表空间无法简单的收缩文件大小
				独立表空间可以通过optimize table命令收缩系统文件
				
				系统表空间会产生瓶颈

			建议：
				对InnoDB使用独立表空间

			表转移的步骤
				把原来存在于系统表空间中的表转移到独立表空间的方法
				步骤：
					1、使用mysqldump导出所有数据库表数据
					2、停止MySQL服务，修改参数、并删除InnoDB相关文件
					3、重启MySQL服务，重建InnoDB系统表空间
					4、重新导入数据
		InnoDB 适用于大多数OLTP应用
			


		MySQL存储引擎之CSV
		
		使用场景
			适合做为数据交换的中间表
			比如 可以将Excel表格存储成CSV文件然后复制到MySQL数据目录就可以用MySQL打开来使用了
			同样如果将数据写入到CSV引擎的表其他的web程序也能立即从表中读取到CSV格式的数据
		
		MySQL存储引擎之Archive（无法对数据进行更新和修改）
			使用场景
				日志和采集类应用


		MySQL存储引擎之Memory
			文件系统存储特点
				所有的数据都是保存在内存中的
				
			使用场景
				用于查找或者是映射表，例如邮编和地区的对应表
				用于保存数据分析中产生的中间表
				用于缓存周期性聚合数据的结果表	

		MySQL存储引擎之Federated
			特点
				提供访问远程MySQL服务器上表的方法
				本地步存储数据，数据全部放到远程服务器上
				本地需要保存表结构和远程服务器的链接信息

			如何使用
				默认禁止，启用需要在启动时增加federated参数
				mysql://user_name[:password]@host_name[:port_num]/db_name/tbl_name;
				
				mysql> show engines;   #查看mysql是否支持Federated引擎
				
				
				如果步支持需要在mysql配置文件中配置支持引擎
				
				
				
				打开 my.cnf MySQL配置文件
				
				在 [mysqld] 下 添加
				
				   federated=1  #表示开启
				
				保存并重启服务器
				
				给远程数据库表设置一个权限
																								
									这个用户拥有的权限						用户名	 允许登录的IP				 密码
				grant select,update,insert,delete on remote.remote_fed  to fred_link@'127.0.0.1'  identified by '123456'
					
				
				注意本地的表结构必须要和远程的表结构相同
				CREATE TABLE remote_fed(
					id int(11) NOT NULL AUTO_INCREMENT,
					c1 varchar(10) NOT NULL DEFAULT '',
					c2 char(10) NOT NULL DEFAULT '',
					PRIMARY_KEY ('id')
				)engine=federated connection='mysql://fred_link:123456@127.0.0.1:3306';
				
				本地的表名可以和远程的不一样，但是再次强调的是表结构必须一样
				
				
			使用场景：
				偶尔的统计分析及手工查询
			
	MySQL服务参数
		内存配置相关参数
			确定可以使用的内存的上限（但不能超过硬件内存）
			确定MySQL的每一个链接使用的内存（MySQL对于一些缓存是会对每个连接单独分配的所以连接数越大这些内存占用的也会越多）
	
			sort_buffer_size
			join_buffer_size
			read_buffer_size
			read_rnd_buffer_size
			确定需要为操作系统保留多少内存
			如何为缓存池分配内存
			
			Inoodb_buffer_pool_size
			
			总内存-（每个线程所需要的内存*连接数）-系统保留内存
			
			key_buffer_size
			
			select sum(index_length) from information_schema.tables where engine='myisam'
			
			其他常用配置参数
				sync_binlog 控制MySQL如何向磁盘刷新binlog
				tmp_table_size和max_heap_table_size 控制内存临时表大小
				max_connections 控制允许的最大连接数
			
			
			
			
			I/O相关配置参数
				Innodb I/O 相关配置
				Innodb_log_file_size
				Innodb_log_file_in_group
				事务日志总大小=
				Innodb_log_files_in_group*Innodb_log_file_size
				Inoodb_log_buffer_size
				Innodb_flush_log_at_trx_commit
				0:每秒进行一次log写入cache,并flush log到磁盘
				1:[默认]在每次事务提交执行log写入cache,并flush log到磁盘
				2[建议]:每次事务提交，执行log数据写入到cache,每秒执行一次flush log到磁盘
				innodb_flush_method=O_DIRECT
				Innodb_file_per_table=1;
				Innodb_doublewrite=1;
				
			MyISAM I/O相关配置
				delay_key_write
				OFF:每次写操作后刷新键缓冲中的脏块到磁盘
				ON:只对在建表是指定了delay_key_write选项的表使用延迟涮新
				ALL:对所有MUISAM表都使用延迟键写入
				
			安全相关配置参数
				expire_logs_days 指定自动清理binlog的天数
				max_allowed_packet 控制MySQL可以接收的包的大小
				skip_name_resolve 禁用DNS查找
				sysdate_is_now 确保sysdate()返回确定性日期
				read_only 禁止非super权限的用户写权限
				skip_slave_start 禁用Slave自动恢复
				sql_mode 设置MySQL所使用的SQL模式
				strict_trans_tables 
				no_engine_subtitutior
				no_zero_date
				no_zero_in_date
				only_full_group_by
				

			数据库设计对性能的影响
				过分反范式化为表建立太多的列
				过分的范式化造成太多的表关联（最好能控制在10个以内的关联）
				在OLTP环境中使用不恰当的分区表	
				使用外键保证数据的完整性
			性能优化顺序
				数据库结构设计和SQL语句
				数据库存储引擎的选择和参数配置
				系统选择及优化
				硬件升级
			
			




























































































