
数据库结构优化的目的
	减少数据冗余
	尽量避免数据维护中出现更新，插入和删除异常
	插入异常：如果表中的某个实体随着另一个实体存在
	更新异常：如果更改表中的某个实体的单独属性时、需要对多行进行更新
	删除异常：如果删除表中的某一实体则会导致其他实体的消失
	
	查看数据表结构
	show create table selectcourse\G;
	
	节约数据存储空间
	
	需求分析：全面了解产品设计的存储需求
		存储需求（数据库需要存储什么样的数据，这些数据有什么样的特点）	
		数据处理需求（就是我们需要对数库如何进行读取或者是修改以完成产品设计的功能以及数据处理的响时间，数据处理是批量处理还是连接处理）
		数据的安全性和完整性（对数据的安全性和完整性有什么样的需求另外就是对数据的生命周期有什么样的需求）
	
	逻辑设计：设计数据的逻辑存储结构数据实体之间的逻辑关系、解决数据冗余和数据维护异常
	物理设计：根据所使用的数据库特点进行结构设计
	维护优化：根据实际情况对索引、存储结构等进行优化
	
	
	关系型书库：Oralce,SQLServer,MySQL,postgreSQL
	非关系型数据库：mongo,Redis,Hadoop

	数据库的三范式
		第一范式
			数据库表中的所有字段都只具有单一属性
			单一属性的列是由基本的数据类型所构成的
			设计出来的表都是简单的二维表
		第二范式
			要求一个表中具有一个业务主键、也就是说
			符合第二范式的表中不能存在非主键列只对
			部分主键的依赖关系
		第三范式
			指每一个非主属性既不部分依赖于也不传递
		    依赖于业务主键，也就是在第二范式的基础
			上消除了非主属性对主键的传递依赖



	需求说明：
		用户登录  商品展示  供应商管理
		用户管理  商品管理   在线销售
		
		符合三范式：
		
		用户信息：{*用户名，密码，手机号，姓名，注册日期，在线状态，出生日期}
		
		商品信息：{*商品名称，出版社名称，图书价格，图书描述，作者}
		分类信息：{*分类名称，分类描述}
		商品分类（对应关系表）：{*商品名称，*分类名称}
		
		供应商信息：{*出版社名称，地址，电话，联系人，银行账号}

		在线销售模块（订单表）：{订单编号，下单用户名，下单日期，支付金额，物流单号}
		订单商品关联表：{*订单编号，*订单商品分类，*订单商品名，商品数量}


		反范式化：
		商品信息：{*商品名称，分类名称，出版社名称，图书价格，图书描述，作者}
		分类信息：{*分类名称，分类描述}
		
		订单表：{订单编号，下单用户名，手机号，下单日期，支付金额，物流单号，订单金额}
		订单商品关联表：{订单编号，订单商品分类，订单商品名，商品数量，商品单价}
		
	如何选择正确的整数类型：
		+--------------------------------------------------------------------------+
		|		       | 		  |    			      取值范围   	     		   |
		|	列类型	   | 存储空间 |------------------------------------------------|
		|			   |          |		    SIGNED 		   | 		UNSIGNED	   |
		+--------------+----------+------------------------+-----------------------|
		|	tinyint	   |	1字节 | -128~127			   | 0~255				   |
		|--------------+----------+------------------------+-----------------------|
		|	smallint   |	2字节 | -32768~32767 		   | 0~65535			   |
		|--------------+----------+------------------------+-----------------------|
		|	mediumint  |	3字节 | -8388608~8388607	   | 0~16777215			   |
		|--------------+----------+------------------------+-----------------------|
		|	int	   	   |	4字节 | -2147483648~2147483647 | 0~4294967295		   |
		|--------------+----------+------------------------+-----------------------|
		|			   |		  | -9223372036854775808   | 0					   |
		|	bigint	   |	8字节 |------------------------+-----------------------|
		|			   |    	  | ~9223372036854775807   | ~18446744073709551615 |
		+--------------------------------------------------------------------------+
		
		
	如何选择正确的实数类型
		+-----------------------------------------------------------+-------------------------+
		|	列类型	   | 			存储空间					    | 		是否精确类型	  |
		+--------------+--------------------------------------------+-------------------------|
		|	FLOAT	   |	4字节								    |			 否			  |
		|--------------+--------------------------------------------+-------------------------|
		|	DOUBLE     |	8字节 		    	  				    | 		     否 	      |
		|--------------+--------------------------------------------+-------------------------|
		|	DECIMAL    |	每4个字节存9个数字，小数点占一个字节    |			 是			  |
		+-------------------------------------------------------------------------------------+



	如何选择VARCHAR 和 CHAR类型
		VARCHAR类型的存储特点
		VARCHAR用于存储变长字符串，只占用必要的存储空间
		列的最大长度小于255则只占用一个额外字节用于记录字符串长度
		列的最大长度大于255则要占用两个额外字节用于记录字符串长度
		
		VARCHAR 长度的选择问题
		使用最小的符合需求的长度
		中文姓名不超过10个字符
		外国人的姓名要到20给字符
		
		VARCHAR(5)和VARCHAR(200)存储’MySQL‘字符串性能不同
		VARCHAR 适用场景
			字符串列的最大长度比平均长度大很多
			字符串列很少被更新
			使用了多字节字符集存储字符串
			
		CHAR类型
			CHAR类型是定长的
			字符串存储在CHAR类型的列中会删除末尾的空格
			CHAR类型的最大宽度为255
			
			CHAR类型的适用场景
			CHAR类型适合存储所有长度近似的值
			密码，身份证，手机号
			CHAR类型适合存储短字符串 （这样会比VARCHAR更节省空间）
			CHAR类型适合存储经常更新的字符串列
			
			
			
		如何存储日期数据
			DATATIME类型
			以YYYY-MM-DD HH:MM:SS[.fraction] 格式存储日期时间
			datetime = YYYY-MM-DD HH:MM:SS
			datetime(6) = YYYY-MM-DD HH:MM:SS.fraction
			
			DATATIME 类型与时区无关，占用8个字节的存储空间
			
			TIMESTAMP 类型（比datetime更节约空间）
			存储了有格林尼治时间1970年1月1日到当前时间的秒数
			以YYYY-MM-DD HH:MM:SS[.fraction] 格式显示4个字节
			
			timestamp 类型显示依赖于所指定的时区
			在行的数据修改时可以自动修改timestamp列的值
			
			date 类型和time类型
			一时把日期部分存储为字符串（至少要8个字）
			二是使用int类型来存储（4个字节）
			三是使用datetime类型来存储（8个字节）
			
			date 类型的优点：
			1.占用的字节数比使用字符串，datetime、int存储要少，使用date类型只需要3个字节
			2.使用Date类型还可以利用日期时间函数进行日期之间的计算
			date类型用于保存1000-01-10到9999-12-31之间的日期
			time类型用于存储时间数据，格式为HH:MM:SS 
			
			存储日期时间数据的注意事项
				不要使用字符串类型来存储日期时间数据
				日期时间类型通常比字符串占用的存储空间小
				日期时间类型在进行查找过滤是可以利用日期类进行对比
				
				日期时间类型还有字丰富的处理函数，可以方便的对日期类型进行日期计算
				使用int存储日期时间不如使用Timestamp类型（存储unix时间戳）
				
			
			































































