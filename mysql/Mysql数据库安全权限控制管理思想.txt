1、制度与流程控制
1.1项目开发制度流程
	办公开发->办公测试-->IDC测试-->IDC上线，通过较完善的项目开发流程控制，防止很多潜在的问题隐患发生。
1.2数据库更新流程
	开发人员提交需求-->开发主管审核-->部门领导审核-->DBA(运维)审核-->执行开发流程的数据库更新测试步骤，
最后在IDC上线执行。需要说明的是在一开始提交需求，就会同时抄给以上人等。
	通过较完善的数据库更新流程控制，可用防止很多潜在数据丢失破坏问题发生。

1.3 DBA参与项目数据库设计	
	在开发环节上DBA和运维人员可用参与数据库的设计与审核，从源头上减少降低不良设计及语句的发生，如果可以
做所有语句的审核工作，包括select，这个需要评估工作量是否允许。


1.4各种操作申请流程
	1）开发等人员权限申请流程。
	2）数据库更新执行流程。
	3）烂SQL语句计入KPI考核。

	
	1.5定期对内部人员培训
	定期给开发及相关人员培训，还是从源头上减少降低不良设计及SQL语句的发生，并通过培训告诉大家数据库性能的重要性
让他大家提升性能意识。
	1）数据库设计规范及制度。
	2）SQL语句执行优化，性能优化技巧等。
	3）数据库架构设计等内容。
2账户权限控制


	2.1内部开发等人员权限分配
		1）权限申请流程要设置严格点，让需求不明确者知难而退。
		2）开发和测试环境可以开一些权限，idc测试和正式环境严格控制数据库写权限，并且读权限和对外业务服务器分离。
		3）开发人员线上数据库权限分配：给单独的不对外服务的正式从库只读权限，不能分配线上正式主库写权限。
		4）特殊人员（如领导），开通权限时间清楚做什么，发邮件回复，注明用户名、密码、权限范围，多提醒操作注
		意事项。
		5）特权账号，由DBA专人控制，禁止在任何客户端上执行特权账户操作（如只能localhost或其他策略）。


	2.2web账户权限分配制度
		1）写库账号默认权限为select,insert,update,delete。不要给键表改表（create,alter）的权限，更不能all权限。
		2）读库正好默认权限为select（配合read-only参数用）。一定要确保从库是只读的（对所有人员）。
		3）根据需要，最好传账号，不要一个账号管理多个库。碎库特别多的小公司根据情况处理。
		4）如果是lamp,lnmp一体的环境，DB权限主机要设置为localhost，避免用root用户做为web连接用。
		5）web和数据库分离的服务器的授权可用根据web服务数量多少按IP或网段来授权。
		6）安全性和方便管理，是矛盾的，要尽量达到一个平衡的状态，如何是平衡就要根据具体公司和业务来衡量了。
	
	2.3 web账户授权实战案例	
		
		a.生产环境主库用户的账号授权：
		GRANT SELECT ON `blog`.* TO `blog`@`10.0.0.%` identified by 'oldboy456';
		说明：这里表示给10.0.0/24 的用户blog管理blog数据库的所有表（*表示所有表）只读权限（SELECT），密码为 oldboy456。
		当然从库除了做SELECT 的授权外，还可以加read-only等只读参数。
	

	2.4生产环境读写分离账户设置
	
		给开发人员的读写分离用户设置，除了IP必须不同外，我们尽量为开发人员的使用提供方便。因此，读写分离地址
	，除了IP不同外，账号，密码，端口都是一样的。这才是人性化设计，体现了DBA的专业。
	
	主库（尽量提供写服务）：blog oldboy456 ip:10.0.0.179 port 3306
	从库 （仅提供读服务）：blog oldboy456 ip:10.0.0.180 port 3306
	
	提示：在数据库的设计上，对于读库，开发人员应该设计优先连接读库，如果读库没有，超时后，可用考虑读主库
	，从程序设计上来保证提升用户体验。当然也要根据主库的繁忙程度来综合考虑。具体情况都是根据业务项目需求
	来选择。
	
	3 数据库客户端访问控制
		1、更改默认mysql client 端口 ，如phpadmin管理端口为9999,其他客户端也是一样。
		2、数据库 web client端统一部署在1-2台不对外服务Server上，限制IP 及9999端口只能从办公室内网访问。
		3、不做公网域名解析，用host事项访问或者用内部IP 访问。
		4、phpadmin站点目录独立于所有其他站点跟目录外，只能由指定的域名或IP地址访问。
		5、限制使用web连接的账号管理数据库，根据用户教授设置指定账号访问。
		6、按开发及相关人员根据职位角色分配管理账号。
		7、设置指定账户访问（apache/nginx验证+mysql用户两个登录限制）。
		8、统一所有数据库账号登陆入口地址。禁止所有开发人员私自上传phpadmin等数据库管理程序。
		9、开通vpn，跳板机，内部IP管理数据库。
	
	4 系统层控制
		1、限制或禁止开发人员 SSH ROOT管理，通过 SUDO 细化权限，使用日志审计。
		2、对 phpadmin 端 config 等配置文件进行读写权限控制
		3、取消非指定服务的所有phpadmin WEB连接端
		4、禁止非管理人员管理有数据库web client端的服务器的权限。
		
	5 读库分业务读写分离
		细则补充：对数据库select 等大量测试、统计、备份等操作、要在不对外提供select的单独从库执行。
		
		可用把几个不同的从服务器，根据公司的业务进行拆分。比如有为外部用户提供查询服务的从服务器，有
	用来备份的从服务器，还有提供公司内部后台，脚本，日志分析及开发人员服务的从服务器，这样的拆分除
	了减轻主服务器的压力外，使得对外用户浏览、对内处理公司内部用户业务，及DBA备份业务互不影响。
	具体可以用下面的简单架构来说明：
	
	主从架构生产环境从服务器分业务拆分使用案例：
	
	M-->S1==>对外部用户提供服务（浏览帖子、浏览博客、浏览文章）
	 -->S2==>对外部用户提供服务（浏览帖子、浏览博客、浏览文章）
	 -->S3==>对外部用户提供服务（浏览帖子、浏览博客、浏览文章）
	 -->S4==>对外部用户提供服务（后台访问、脚本任务、数据分析，开发人员浏览）
	 -->S5==>数据库备份服务（开启从服务器binlog功能，可事项增量备份及恢复）
	6 数据库运维管理思想核心
		1）未雨绸缪，不要停留在制度上，而是，实际做出来
		2）亡羊补牢，举一反三，切记，不能好了伤疤忘了疼。
		3）完备的架构设计及备份、恢复策略。
		4）定期思考、并实战模拟以上策略演练。
		
	   未雨绸缪永远比出了问题在处理要好的多，出了问题补救是没办法不得已的事，最差的是很多公司，没有亡羊补牢，而且
	  是好了伤疤忘了疼，没过多久问题又发生了。
	  
	  因此，在工作中要尽量做到未雨绸缪，从源头上减少故障的发生，其次，要做到亡羊补牢，举一反三，事情出现一次
	  就不能在出现第二次。当然，完善的备份和恢复策略也是需要做的。只有把这些给合起来。才能把我们运维的工作做的更好。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	